package reportbuilder

import (
	"fmt"
	"sort"
	"strings"
	"telegram-tax-bot/internal/model"
	"telegram-tax-bot/internal/utils"
	"time"
)

func BuildReport(data model.Data) string {
	calcDate, _ := utils.ParseDate(data.Current)
	oneYearAgo := calcDate.AddDate(-1, 0, 0).AddDate(0, 0, 1)
	countryDays := make(map[string]int)
	var previousOutDate time.Time

	for i, period := range data.Periods {
		var inDate, outDate time.Time
		if period.Out != "" {
			outDate, _ = utils.ParseDate(period.Out)
		} else {
			outDate = calcDate
		}

		if i == 0 && period.In == "" {
			inDate = oneYearAgo
			if outDate.Before(oneYearAgo) {
				continue
			}
		} else {
			inDate, _ = utils.ParseDate(period.In)
		}

		// –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
		if i > 0 && inDate.Before(previousOutDate) {
			return fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–µ—Ä–∏–æ–¥—ã –Ω–µ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–µ—Ä–∏–æ–¥ %d)", i+1)
		}

		// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑—Ä—ã–≤–∞ –º–µ–∂–¥—É –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∏ —Ç–µ–∫—É—â–∏–º
		if i > 0 && !previousOutDate.IsZero() {
			gapStart := previousOutDate.AddDate(0, 0, 1)
			if gapStart.Before(inDate) {
				gapEnd := inDate.AddDate(0, 0, -1)
				// –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –æ–∫–Ω–∞
				if gapEnd.After(calcDate) {
					gapEnd = calcDate
				}
				if gapStart.Before(oneYearAgo) {
					gapStart = oneYearAgo
				}
				if !gapStart.After(gapEnd) {
					days := int(gapEnd.Sub(gapStart).Hours()/24) + 1
					countryDays["unknown"] += days
				}
			}
		}

		previousOutDate = outDate

		// –æ–±—Ä–µ–∑–∫–∞ –¥–æ –æ–∫–Ω–∞
		if outDate.Before(oneYearAgo) {
			continue
		}
		if inDate.Before(oneYearAgo) {
			inDate = oneYearAgo
		}
		if outDate.After(calcDate) {
			outDate = calcDate
		}
		if inDate.After(outDate) {
			continue
		}

		effectiveOutDate := outDate.AddDate(0, 0, 1)
		days := int(effectiveOutDate.Sub(inDate).Hours() / 24)
		countryDays[period.Country] += days
	}

	if len(countryDays) == 0 {
		return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
	}

	type stat struct {
		Country string
		Days    int
	}
	var stats []stat
	for c, d := range countryDays {
		stats = append(stats, stat{c, d})
	}
	sort.Slice(stats, func(i, j int) bool {
		return stats[i].Days > stats[j].Days
	})

	builder := strings.Builder{}
	builder.WriteString(fmt.Sprintf("–ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥: %s ‚Äî %s\n\n", utils.FormatDate(oneYearAgo), utils.FormatDate(calcDate)))
	for _, s := range stats {
		if s.Country == "unknown" {
			builder.WriteString(fmt.Sprintf("üï≥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –≥–¥–µ: %d –¥–Ω–µ–π\n", s.Days))
			continue
		}
		iso := countryCodeMap[s.Country]
		flag := countryToFlag(iso)
		builder.WriteString(fmt.Sprintf("%s %s: %d –¥–Ω–µ–π\n", flag, s.Country, s.Days))
	}

	builder.WriteString("\n")
	if stats[0].Country != "unknown" && stats[0].Days >= 183 {
		iso := countryCodeMap[stats[0].Country]
		flag := countryToFlag(iso)
		builder.WriteString(fmt.Sprintf("‚úÖ –ù–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç: %s %s (%d –¥–Ω–µ–π)\n", flag, stats[0].Country, stats[0].Days))
	} else {
		for _, s := range stats {
			if s.Country != "unknown" {
				builder.WriteString(fmt.Sprintf("‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä–∞–Ω—ã —Å >=183 –¥–Ω—è–º–∏. –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤: %s (%d –¥–Ω–µ–π)\n", s.Country, s.Days))
				break
			}
		}
	}

	return builder.String()
}

func countryToFlag(isoCode string) string {
	isoCode = strings.ToUpper(isoCode)
	if len(isoCode) != 2 {
		return ""
	}
	return string(rune(0x1F1E6+int(isoCode[0]-'A'))) + string(rune(0x1F1E6+int(isoCode[1]-'A')))
}

var countryCodeMap = map[string]string{
	"–ê–≤—Å—Ç—Ä–∞–ª–∏—è":            "AU",
	"–ê–≤—Å—Ç—Ä–∏—è":              "AT",
	"–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω":          "AZ",
	"–ê–ª–±–∞–Ω–∏—è":              "AL",
	"–ê–ª–∂–∏—Ä":                "DZ",
	"–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–µ –°–∞–º–æ–∞":   "AS",
	"–ê–Ω–≥–æ–ª–∞":               "AO",
	"–ê–Ω–¥–æ—Ä—Ä–∞":              "AD",
	"–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞":            "AR",
	"–ê—Ä–º–µ–Ω–∏—è":              "AM",
	"–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω":           "AF",
	"–ë–∞–Ω–≥–ª–∞–¥–µ—à":            "BD",
	"–ë–µ–ª–∞—Ä—É—Å—å":             "BY",
	"–ë–µ–ª—å–≥–∏—è":              "BE",
	"–ë–æ–ª–≥–∞—Ä–∏—è":             "BG",
	"–ë–æ–ª–∏–≤–∏—è":              "BO",
	"–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞": "BA",
	"–ë—Ä–∞–∑–∏–ª–∏—è":             "BR",
	"–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è":       "GB",
	"–í–µ–Ω–≥—Ä–∏—è":              "HU",
	"–í–µ–Ω–µ—Å—É—ç–ª–∞":            "VE",
	"–í—å–µ—Ç–Ω–∞–º":              "VN",
	"–ì–µ—Ä–º–∞–Ω–∏—è":             "DE",
	"–ì–æ–Ω–∫–æ–Ω–≥":              "HK",
	"–ì—Ä–µ—Ü–∏—è":               "GR",
	"–ì—Ä—É–∑–∏—è":               "GE",
	"–î–∞–Ω–∏—è":                "DK",
	"–ï–≥–∏–ø–µ—Ç":               "EG",
	"–ò–∑—Ä–∞–∏–ª—å":              "IL",
	"–ò–Ω–¥–∏—è":                "IN",
	"–ò–Ω–¥–æ–Ω–µ–∑–∏—è":            "ID",
	"–ò–æ—Ä–¥–∞–Ω–∏—è":             "JO",
	"–ò—Ä–∞–∫":                 "IQ",
	"–ò—Ä–∞–Ω":                 "IR",
	"–ò—Ä–ª–∞–Ω–¥–∏—è":             "IE",
	"–ò—Å–ª–∞–Ω–¥–∏—è":             "IS",
	"–ò—Å–ø–∞–Ω–∏—è":              "ES",
	"–ò—Ç–∞–ª–∏—è":               "IT",
	"–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω":            "KZ",
	"–ö–∞–º–±–æ–¥–∂–∞":             "KH",
	"–ö–∞–Ω–∞–¥–∞":               "CA",
	"–ö–∞—Ç–∞—Ä":                "QA",
	"–ö–µ–Ω–∏—è":                "KE",
	"–ö–∏–ø—Ä":                 "CY",
	"–ö–∏—Ç–∞–π":                "CN",
	"–ö–æ–ª—É–º–±–∏—è":             "CO",
	"–ö–æ—Å—Ç–∞-–†–∏–∫–∞":           "CR",
	"–ö—É–±–∞":                 "CU",
	"–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω":           "KG",
	"–õ–∞—Ç–≤–∏—è":               "LV",
	"–õ–∏–≤–∞–Ω":                "LB",
	"–õ–∏—Ç–≤–∞":                "LT",
	"–õ—é–∫—Å–µ–º–±—É—Ä–≥":           "LU",
	"–ú–∞–ª–∞–π–∑–∏—è":             "MY",
	"–ú–∞–ª—å—Ç–∞":               "MT",
	"–ú–∞—Ä–æ–∫–∫–æ":              "MA",
	"–ú–µ–∫—Å–∏–∫–∞":              "MX",
	"–ú–æ–ª–¥–æ–≤–∞":              "MD",
	"–ú–æ–Ω–≥–æ–ª–∏—è":             "MN",
	"–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã":           "NL",
	"–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è":       "NZ",
	"–ù–æ—Ä–≤–µ–≥–∏—è":             "NO",
	"–û–ê–≠":                  "AE",
	"–ü–∞–∫–∏—Å—Ç–∞–Ω":             "PK",
	"–ü–∞–Ω–∞–º–∞":               "PA",
	"–ü–µ—Ä—É":                 "PE",
	"–ü–æ–ª—å—à–∞":               "PL",
	"–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è":           "PT",
	"–†–æ—Å—Å–∏—è":               "RU",
	"–†—É–º—ã–Ω–∏—è":              "RO",
	"–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è":    "SA",
	"–°–µ—Ä–±–∏—è":               "RS",
	"–°–∏–Ω–≥–∞–ø—É—Ä":             "SG",
	"–°–ª–æ–≤–∞–∫–∏—è":             "SK",
	"–°–ª–æ–≤–µ–Ω–∏—è":             "SI",
	"–°–®–ê":                  "US",
	"–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω":          "TJ",
	"–¢–∞–∏–ª–∞–Ω–¥":              "TH",
	"–¢—É–Ω–∏—Å":                "TN",
	"–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω":         "TM",
	"–¢—É—Ä—Ü–∏—è":               "TR",
	"–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω":           "UZ",
	"–£–∫—Ä–∞–∏–Ω–∞":              "UA",
	"–§–∏–ª–∏–ø–ø–∏–Ω—ã":            "PH",
	"–§–∏–Ω–ª—è–Ω–¥–∏—è":            "FI",
	"–§—Ä–∞–Ω—Ü–∏—è":              "FR",
	"–•–æ—Ä–≤–∞—Ç–∏—è":             "HR",
	"–ß–µ—Ö–∏—è":                "CZ",
	"–ß–∏–ª–∏":                 "CL",
	"–®–≤–µ–π—Ü–∞—Ä–∏—è":            "CH",
	"–®–≤–µ—Ü–∏—è":               "SE",
	"–®—Ä–∏-–õ–∞–Ω–∫–∞":            "LK",
	"–≠—Å—Ç–æ–Ω–∏—è":              "EE",
	"–Æ–ê–†":                  "ZA",
	"–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è":          "KR",
	"–Ø–ø–æ–Ω–∏—è":               "JP",
}
