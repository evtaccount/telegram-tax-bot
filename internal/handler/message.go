package handler

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strconv"
	"strings"
	"telegram-tax-bot/internal/manager"
	"telegram-tax-bot/internal/model"
	"telegram-tax-bot/internal/utils"
	"time"

	reportbuilder "telegram-tax-bot/internal/report_builder"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (r *Registry) handleMessage(msg *tgbotapi.Message) {
	userID := msg.From.ID
	s := manager.GetSession(userID)
	text := msg.Text

	switch s.PendingAction {
	case "awaiting_edit_index":
		handleAwaitingEditIndex(msg, s, r.bot)
		return
	case "awaiting_date":
		handleAwaitingDate(msg, s, r.bot)
		return
	case "awaiting_new_in":
		handleAwaitingNewIn(msg, s, r.bot)
		return
	case "awaiting_new_out":
		handleAwaitingNewOut(msg, s, r.bot)
		return
	case "awaiting_new_country":
		handleAwaitingNewCountry(msg, s, r.bot)
		return
	case "awaiting_add_out":
		handleAwaitingAddOut(msg, s, r.bot)
		return
	case "awaiting_add_country":
		handleAwaitingAddCountry(msg, s, r.bot)
		return
	case "awaiting_add_open_country":
		handleAddOpenCountry(msg, s, r.bot)
		return
	case "awaiting_tail_out":
		handleAwaitingTailOut(msg, s, r.bot)
		return
	case "awaiting_tail_country":
		handleAwaitingTailCountry(msg, s, r.bot)
		return
	case "awaiting_head_in":
		handleAwaitingHeadIn(msg, s, r.bot)
		return
	case "awaiting_head_country":
		handleAwaitingHeadCountry(msg, s, r.bot)
		return
	case "awaiting_add_in":
		handleAddin(msg, s, r.bot)
		return
	}

	// ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ JSON-—Ñ–∞–π–ª–∞
	if msg.Document != nil && s.Data.Current == "upload_pending" {
		handleInputFile(msg, s, r.bot)
		return
	}

	// ‚úÖ –ö–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
	switch {
	case strings.HasPrefix(text, "/start"), text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
		handleStartCommand(s, msg, r.bot)
	case strings.HasPrefix(text, "/help"), text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
		handleHelpCommand(msg, r.bot)
	case text == "üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", text == "üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª":
		handleUploadCommand(s, msg, r.bot)
	case text == "üóë –°–±—Ä–æ—Å–∏—Ç—å":
		handleResetCommand(s, msg, r.bot)
	case text == "üìÖ –û—Ç—á—ë—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É":
		handleSetDateCommand(s, msg, r.bot)
	case text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ":
		handlePeriodsCommand(s, msg, r.bot)
	case text == "üìä –û—Ç—á—ë—Ç":
		handleShowReport(s, msg, r.bot)
	default:
		if strings.HasPrefix(text, "{") {
			handleJSONInput(msg, s, r.bot)
		} else {
			r.bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫."))
		}
	}
}

func handleAwaitingEditIndex(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	index, err := strconv.Atoi(strings.TrimSpace(msg.Text))

	if err != nil || index < 1 || index > len(s.Data.Periods) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞."))
		return
	}

	s.EditingIndex = index - 1
	s.PendingAction = "awaiting_edit_field"
	s.SaveSession()

	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ (in)", "edit_in"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÜ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (out)", "edit_out"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåç –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", "edit_country"),
		),
	)
	from := s.Data.Periods[s.EditingIndex].In
	till := s.Data.Periods[s.EditingIndex].Out
	msgText := fmt.Sprintf("–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ —Å %s –ø–æ %s. –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", from, till)
	msgToSend := tgbotapi.NewMessage(msg.Chat.ID, msgText)
	msgToSend.ReplyMarkup = buttons
	bot.Send(msgToSend)
}

func handleAwaitingDate(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	date, err := utils.ParseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."))
		return
	}
	s.Data.Current = date.Format("02.01.2006")
	s.PendingAction = ""
	s.SaveSession()
	report := reportbuilder.BuildReport(s.Data)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ –î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %s\n\n%s", s.Data.Current, report)))
}

func handleAwaitingNewIn(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	newDate, err := utils.ParseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã."))
		return
	}

	index := s.EditingIndex
	if index < 0 || index >= len(s.Data.Periods) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–∏–æ–¥–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."))
		return
	}

	curr := s.Data.Periods[index]
	oldDate, _ := utils.ParseDate(curr.In)
	if newDate.Equal(oldDate) {
		s.PendingAction = ""
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ÑπÔ∏è –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."))
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
	if index > 0 {
		prev := s.Data.Periods[index-1]
		prevOut, err := utils.ParseDate(prev.Out)
		if err == nil {
			switch {
			case newDate.Before(prevOut):
				// –∫–æ–Ω—Ñ–ª–∏–∫—Ç ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–≤–∏–Ω—É—Ç—å out –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
				s.TempEditedIn = newDate.Format("02.01.2006")
				s.PendingAction = "resolve_in_conflict"
				s.SaveSession()

				text := fmt.Sprintf("‚ö†Ô∏è –ù–æ–≤–∞—è –¥–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º (%s). –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
					utils.FormatDate(prevOut))
				markup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìå –ü–æ–¥–≤–∏–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥", "adjust_prev_out")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", "keep_conflict")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_edit")),
				)
				msg := tgbotapi.NewMessage(msg.Chat.ID, text)
				msg.ReplyMarkup = markup
				bot.Send(msg)
				return

			case newDate.After(prevOut.AddDate(0, 0, 1)):
				// –∑–∞–∑–æ—Ä ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
				s.TempEditedIn = newDate.Format("02.01.2006")
				s.PendingAction = "resolve_in_gap"
				s.SaveSession()

				text := fmt.Sprintf("‚ö†Ô∏è –ú–µ–∂–¥—É %s –∏ %s –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑—Ä—ã–≤. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
					utils.FormatDate(prevOut.AddDate(0, 0, 1)), utils.FormatDate(newDate))
				markup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìå –ü–æ–¥–≤–∏–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥", "adjust_prev_out")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", "keep_conflict")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_edit")),
				)
				msg := tgbotapi.NewMessage(msg.Chat.ID, text)
				msg.ReplyMarkup = markup
				bot.Send(msg)
				return
			}
		}
	}

	// –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –æ–±–Ω–æ–≤–ª—è–µ–º
	s.Data.Periods[index].In = newDate.Format("02.01.2006")
	s.PendingAction = ""
	s.SaveSession()
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
}

func handleAwaitingNewOut(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	newDate, err := utils.ParseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã."))
		return
	}

	index := s.EditingIndex
	if index < 0 || index >= len(s.Data.Periods) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–∏–æ–¥–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."))
		return
	}

	curr := s.Data.Periods[index]
	oldDate, _ := utils.ParseDate(curr.Out)
	if newDate.Equal(oldDate) {
		s.PendingAction = ""
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ÑπÔ∏è –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."))
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å —Å–ª–µ–¥—É—é—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
	if index < len(s.Data.Periods)-1 {
		next := s.Data.Periods[index+1]
		nextIn, err := utils.ParseDate(next.In)
		if err == nil {
			switch {
			case newDate.After(nextIn):
				s.TempEditedOut = newDate.Format("02.01.2006")
				s.PendingAction = "resolve_out_conflict"
				s.SaveSession()

				text := fmt.Sprintf("‚ö†Ô∏è –ù–æ–≤–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º (%s). –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
					utils.FormatDate(nextIn))
				markup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìå –ü–æ–¥–≤–∏–Ω—É—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥", "adjust_next_in")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", "keep_conflict")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_edit")),
				)
				msg := tgbotapi.NewMessage(msg.Chat.ID, text)
				msg.ReplyMarkup = markup
				bot.Send(msg)
				return

			case newDate.Before(nextIn.AddDate(0, 0, -1)):
				s.TempEditedOut = newDate.Format("02.01.2006")
				s.PendingAction = "resolve_out_gap"
				s.SaveSession()

				text := fmt.Sprintf("‚ö†Ô∏è –ú–µ–∂–¥—É %s –∏ %s –æ–±—Ä–∞–∑–æ–≤–∞–ª—Å—è —Ä–∞–∑—Ä—ã–≤. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
					utils.FormatDate(newDate.AddDate(0, 0, 1)), utils.FormatDate(nextIn))
				markup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìå –ü–æ–¥–≤–∏–Ω—É—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥", "adjust_next_in")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", "keep_conflict")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_edit")),
				)
				msg := tgbotapi.NewMessage(msg.Chat.ID, text)
				msg.ReplyMarkup = markup
				bot.Send(msg)
				return
			}
		}
	}

	// –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –æ–±–Ω–æ–≤–ª—è–µ–º
	s.Data.Periods[index].Out = newDate.Format("02.01.2006")
	s.PendingAction = ""
	s.SaveSession()
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
}

func handleAwaitingNewCountry(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	newCountry := strings.TrimSpace(msg.Text)
	if newCountry == "" {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."))
		return
	}
	s.Data.Periods[s.EditingIndex].Country = newCountry
	s.PendingAction = ""
	s.SaveSession()
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –°—Ç—Ä–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
}

func handleAwaitingAddOut(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	if len(s.Temp) == 0 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."))
		s.PendingAction = ""
		return
	}
	date, err := utils.ParseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."))
		return
	}
	inDate, err := utils.ParseDate(s.Temp[0].In)
	if err != nil || date.Before(inDate) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ä–µ–∑–¥–∞."))
		return
	}
	s.Temp[0].Out = date.Format("02.01.2006")
	s.PendingAction = "awaiting_add_country"
	s.SaveSession()
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üåç –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:"))
}

func handleAwaitingAddCountry(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	country := strings.TrimSpace(msg.Text)
	if country == "" {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –°—Ç—Ä–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π."))
		return
	}
	if len(s.Temp) == 0 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –ø—É—Å—Ç."))
		s.PendingAction = ""
		return
	}
	period := s.Temp[0]
	period.Country = country

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
	newIn, errIn := utils.ParseDate(period.In)
	if errIn != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤—ä–µ–∑–¥–∞."))
		return
	}

	if len(s.Data.Periods) > 0 {
		last := s.Data.Periods[len(s.Data.Periods)-1]
		lastOut := last.Out
		if lastOut == "" {
			lastOut = s.Data.Current
		}
		lastOutDate, err := utils.ParseDate(lastOut)
		if err == nil && newIn.Before(lastOutDate) {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥: –Ω–∞—Ä—É—à–µ–Ω —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫."))
			s.PendingAction = ""
			s.Temp = nil
			return
		}
	}

	s.Data.Periods = append(s.Data.Periods, period)
	s.Temp = nil
	s.PendingAction = ""
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω."))
	handlePeriodsCommand(s, msg, bot)
}

func handleAddOpenCountry(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	country := strings.TrimSpace(msg.Text)
	if country == "" {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"))
		return
	}
	s.Data.Periods = append(s.Data.Periods, model.Period{
		In:      s.Data.Current,
		Out:     "",
		Country: country,
	})
	s.PendingAction = ""
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω."))
	handlePeriodsCommand(s, msg, bot)
}

func handleAwaitingTailOut(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	date, err := utils.ParseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."))
		return
	}

	s.Temp = []model.Period{{Out: date.Format("02.01.2006")}}
	s.PendingAction = "awaiting_tail_country"
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üåç –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:"))
}

func handleAwaitingTailCountry(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	country := strings.TrimSpace(msg.Text)
	if country == "" {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –°—Ç—Ä–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π."))
		return
	}
	if len(s.Temp) == 0 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."))
		s.PendingAction = ""
		return
	}

	period := s.Temp[0]
	period.Country = country

	if len(s.Data.Periods) > 0 {
		first := s.Data.Periods[0]
		if first.In != "" {
			firstIn, err := utils.ParseDate(first.In)
			outDate, errOut := utils.ParseDate(period.Out)
			if err == nil && errOut == nil && outDate.After(firstIn) {
				bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞."))
				s.PendingAction = ""
				s.Temp = nil
				return
			}
		}
	}

	s.Data.Periods = append([]model.Period{period}, s.Data.Periods...)
	s.PendingAction = ""
	s.Temp = nil
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω."))
	handlePeriodsCommand(s, msg, bot)
}

func handleAwaitingHeadIn(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	date, err := utils.ParseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."))
		return
	}

	s.Temp = []model.Period{{In: date.Format("02.01.2006")}}
	s.PendingAction = "awaiting_head_country"
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üåç –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:"))
}

func handleAwaitingHeadCountry(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	country := strings.TrimSpace(msg.Text)
	if country == "" {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –°—Ç—Ä–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π."))
		return
	}
	if len(s.Temp) == 0 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –ø—É—Å—Ç."))
		s.PendingAction = ""
		return
	}

	period := s.Temp[0]
	period.Country = country

	if len(s.Data.Periods) > 0 {
		last := s.Data.Periods[len(s.Data.Periods)-1]
		lastOut := last.Out
		if lastOut == "" {
			lastOut = s.Data.Current
		}
		newIn, err1 := utils.ParseDate(period.In)
		lastOutDate, err2 := utils.ParseDate(lastOut)
		if err1 == nil && err2 == nil && newIn.Before(lastOutDate) {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥: –Ω–∞—Ä—É—à–µ–Ω —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫."))
			s.PendingAction = ""
			s.Temp = nil
			return
		}
	}

	s.Data.Periods = append(s.Data.Periods, period)
	s.PendingAction = ""
	s.Temp = nil
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω."))
	handlePeriodsCommand(s, msg, bot)
}

func handleAddin(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	text := strings.TrimSpace(msg.Text)
	_, err := utils.ParseDate(text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."))
		return
	}
	s.Temp = []model.Period{{In: text}} // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É in –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	s.PendingAction = "awaiting_add_out"
	s.SaveSession()
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):"))
}

func handleJSONInput(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	s.BackupSession()
	err := json.Unmarshal([]byte(msg.Text), &s.Data)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."))
		return
	}
	if s.Data.Current == "" {
		s.Data.Current = time.Now().Format("02.01.2006")
	}
	s.SaveSession()
	report := reportbuilder.BuildReport(s.Data)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, report))
}

func handleInputFile(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	fileID := msg.Document.FileID
	file, _ := bot.GetFile(tgbotapi.FileConfig{FileID: fileID})
	url := file.Link(bot.Token)
	resp, err := http.Get(url)

	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª."))
		return
	}

	body, _ := io.ReadAll(resp.Body)
	_ = resp.Body.Close()

	msg.Text = string(body)
	s.Data.Current = "" // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
	handleJSONInput(msg, s, bot)
}
