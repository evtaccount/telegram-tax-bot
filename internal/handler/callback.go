package handler

import (
	"fmt"
	"os"
	"strings"
	"telegram-tax-bot/internal/keyboard"
	"telegram-tax-bot/internal/model"
	"telegram-tax-bot/internal/service"
	"telegram-tax-bot/internal/utils"

	reportbuilder "telegram-tax-bot/internal/report_builder"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (r *Registry) handleCallback(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	session := service.GetSession(userID)
	data := callback.Data
	chatID := callback.Message.Chat.ID
	message := callback.Message

	switch data {
	case "start":
		handleStartCommand(session, message, r.bot)
	case "help":
		handleHelpCommand(message, r.bot)
	case "reset":
		handleResetCommand(session, message, r.bot)
	case "set_date":
		handleSetDateCommand(session, message, r.bot)
	case "upload_report", "upload_file":
		handleUploadCommand(session, message, r.bot)
	case "periods":
		handlePeriodsCommand(session, message, r.bot)
	case "add_gap_period":
		handleAddGapPeriod(session, callback, r.bot)
	case "adjust_next_in":
		handleAdjustNextIn(session, message, r.bot)
	case "keep_conflict":
		handleKeepConflict(session, message, r.bot)
	case "cancel_edit":
		handleCancelEdit(session, message, r.bot)
	case "show_report":
		report := reportbuilder.BuildReport(session.Data)
		msg := tgbotapi.NewMessage(chatID, report)
		msg.ReplyMarkup = keyboard.BuildBackToMenu()
		r.bot.Send(msg)
	case "add_period":
		// –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
		reply := tgbotapi.NewMessage(chatID, "‚ûï –ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?")
		reply.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üóì –•–≤–æ—Å—Ç–æ–≤–æ–π (—Ç–æ–ª—å–∫–æ –≤—ã–µ–∑–¥)", "add_tail"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚èÆ –ù–∞—á–∞–ª—å–Ω—ã–π (—Ç–æ–ª—å–∫–æ –≤—ä–µ–∑–¥)", "add_head"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìÑ –ü–æ–ª–Ω—ã–π (–≤—ä–µ–∑–¥+–≤—ã–µ–∑–¥)", "add_full"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "start"),
			),
		)
		r.bot.Send(reply)

	case "add_tail":
		session.PendingAction = "awaiting_tail_out"
		session.SaveSession()

		replay := tgbotapi.NewMessage(chatID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–î–î.MM.YYYY):")
		replay.ReplyMarkup = keyboard.BuildBackToMenu()
		r.bot.Send(replay)

	case "add_head":
		session.PendingAction = "awaiting_head_in"
		session.SaveSession()

		replay := tgbotapi.NewMessage(chatID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ (–î–î.MM.YYYY):")
		replay.ReplyMarkup = keyboard.BuildBackToMenu()
		r.bot.Send(replay)

	case "add_full":
		session.PendingAction = "awaiting_full_in"
		session.SaveSession()

		replay := tgbotapi.NewMessage(chatID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ (–î–î.MM.YYYY):")
		replay.ReplyMarkup = keyboard.BuildBackToMenu()
		r.bot.Send(replay)
		if session.IsEmpty() {
			r.bot.Send(tgbotapi.NewMessage(chatID, "üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."))
		} else {
			session.PendingAction = "awaiting_delete_index"
			session.SaveSession()
			r.bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:"))
		}
	case "edit_period":
		if session.IsEmpty() {
			r.bot.Send(tgbotapi.NewMessage(chatID, "üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."))
		} else {
			session.PendingAction = "awaiting_edit_index"
			session.SaveSession()
			r.bot.Send(tgbotapi.NewMessage(chatID, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"))
		}
	case "adjust_prev_out":
		newIn, _ := utils.ParseDate(session.TempEditedIn)
		session.Data.Periods[session.EditingIndex-1].Out = newIn.Format("02.01.2006")
		session.Data.Periods[session.EditingIndex].In = newIn.Format("02.01.2006")
		session.PendingAction = ""
		session.TempEditedIn = ""
		session.SaveSession()
		r.bot.Send(tgbotapi.NewMessage(chatID, "üìå –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–≤–∏–Ω—É—Ç. –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
		handlePeriodsCommand(session, callback.Message, r.bot)
	case "edit_in":
		session.PendingAction = "awaiting_new_in"
		session.SaveSession()
		curr := session.Data.Periods[session.EditingIndex].In
		r.bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úèÔ∏è –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ %s. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞:", curr)))
	case "edit_out":
		session.PendingAction = "awaiting_new_out"
		session.SaveSession()
		curr := session.Data.Periods[session.EditingIndex].Out
		r.bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úèÔ∏è –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ %s. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:", curr)))
	case "edit_country":
		session.PendingAction = "awaiting_new_country"
		session.SaveSession()
		r.bot.Send(tgbotapi.NewMessage(chatID, "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:"))
	default:
		r.bot.Send(tgbotapi.NewMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞."))
	}

	r.bot.Request(tgbotapi.NewCallback(callback.ID, ""))
	// continue
}

func handleStartCommand(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	reply := tgbotapi.NewMessage(msg.Chat.ID, "üîò –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	reply.ReplyMarkup = keyboard.BuildMainMenu(s)
	bot.Send(reply)
}

func handleHelpCommand(msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	helpText := `‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ª–æ–≥–æ–≤–æ–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö.

üìé –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?
1. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ JSON-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫ (—Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–º–µ—Ä ‚Äî –ø–æ –∫–Ω–æ–ø–∫–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª").
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /upload_report –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üìé.
3. –ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç, –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –ø—Ä–æ–≤–µ–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥.

üìÖ –ö–∞–∫ –∑–∞–¥–∞—Ç—å –¥–∞—Ç—É —Ä–∞—Å—á–µ—Ç–∞?
‚Äî –í—ã–±–µ—Ä–∏—Ç–µ "üìÖ –ó–∞–¥–∞—Ç—å –¥–∞—Ç—É" –∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.04.2025).

üìä –ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –æ—Ç—á–µ—Ç?
‚Äî –°—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø—Ä–æ–≤–µ–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–Ω–µ–π.
‚Äî –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∞ —Å 183+ –¥–Ω—è–º–∏ ‚Äî –≤—ã –Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã.

üîÅ –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Äî /reset: —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
‚Äî /periods: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤

üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`

	newMsg := tgbotapi.NewMessage(msg.Chat.ID, helpText)
	newMsg.ReplyMarkup = keyboard.BuildBackToMenu()
	bot.Send(newMsg)
}

func handleResetCommand(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if s.IsEmpty() {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."))
		return
	}
	s.Data = model.Data{}
	s.Backup = model.Data{}
	s.Temp = nil
	_ = os.Remove(fmt.Sprintf("%s/data.json", s.HistoryDir))
	s.SaveSession()

	newMsg := tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")
	newMsg.ReplyMarkup = keyboard.BuildBackToMenu()
	bot.Send(newMsg)
}

func handleSetDateCommand(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if s.IsEmpty() {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."))
		return
	}
	s.PendingAction = "awaiting_date"
	s.SaveSession()
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"))
}

func handleUploadCommand(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.Data.Current = "upload_pending"
	s.SaveSession()

	newMsg := tgbotapi.NewMessage(msg.Chat.ID, "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.")
	newMsg.ReplyMarkup = keyboard.BuildBackToMenu()
	bot.Send(newMsg)
}

func handlePeriodsCommand(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if s.IsEmpty() {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."))
		return
	}
	msgText := s.BuildPeriodsList()
	newMsg := tgbotapi.NewMessage(msg.Chat.ID, msgText)
	newMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥", "edit_period")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥", "add_period")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üóë –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥", "delete_period")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìä –û—Ç—á—ë—Ç", "show_report")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start")),
	)
	bot.Send(newMsg)
}

func handleAddGapPeriod(s *model.Session, callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	chatID := callback.Message.Chat.ID

	newIn, _ := utils.ParseDate(s.TempEditedIn)
	prev := s.Data.Periods[s.EditingIndex-1]

	prevOut, _ := utils.ParseDate(prev.Out)
	newGapStart := prevOut.AddDate(0, 0, 1)
	newGapEnd := newIn.AddDate(0, 0, -1)

	newGap := model.Period{
		In:      newGapStart.Format("02.01.2006"),
		Out:     newGapEnd.Format("02.01.2006"),
		Country: "unknown",
	}

	// –í—Å—Ç–∞–≤–∏—Ç—å "unknown" –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–∏–º
	s.Data.Periods = append(
		s.Data.Periods[:s.EditingIndex],
		append([]model.Period{newGap}, s.Data.Periods[s.EditingIndex:]...)...,
	)

	// –û–±–Ω–æ–≤–ª—è–µ–º in —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	s.Data.Periods[s.EditingIndex+1].In = newIn.Format("02.01.2006")
	s.EditingIndex++ // –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
	s.PendingAction = ""
	s.TempEditedIn = ""
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(chatID, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ 'unknown'. –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	handlePeriodsCommand(s, callback.Message, bot)
}

func handleAdjustNextIn(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	index := s.EditingIndex
	if index+1 >= len(s.Data.Periods) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –û—à–∏–±–∫–∞: —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."))
		return
	}

	newOut, err := utils.ParseDate(s.TempEditedOut)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã."))
		return
	}

	// ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º out —É —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ in —É —Å–ª–µ–¥—É—é—â–µ–≥–æ
	s.Data.Periods[index].Out = s.TempEditedOut
	s.Data.Periods[index+1].In = newOut.AddDate(0, 0, 1).Format("02.01.2006")

	s.PendingAction = ""
	s.TempEditedOut = ""
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üìå –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ —Å–¥–≤–∏–Ω—É—Ç. –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
}

func handleKeepConflict(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if s.PendingAction == "confirm_conflict_in" {
		s.Data.Periods[s.EditingIndex].In = s.TempEditedIn
		s.PendingAction = ""
		s.SaveSession()
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	} else if s.PendingAction == "confirm_conflict_out" {
		s.Data.Periods[s.EditingIndex].Out = s.TempEditedIn
		s.PendingAction = ""
		s.SaveSession()
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	} else {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –ù–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞."))
		return
	}

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
}

func handleCancelEdit(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.PendingAction = ""
	s.TempEditedOut = ""
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."))
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
}

func formatPeriodList(periods []model.Period, current string) string {
	var builder strings.Builder
	builder.WriteString("üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤:\n\n")
	for i, p := range periods {
		in := p.In
		if in == "" {
			in = "‚Äî"
		}
		out := p.Out
		if out == "" {
			out = "–ø–æ " + current
		}
		builder.WriteString(fmt.Sprintf("%d. %s ‚Äî %s (%s)\n", i+1, in, out, p.Country))
	}
	return builder.String()
}
