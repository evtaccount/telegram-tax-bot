package handler

import (
	"fmt"
	"os"
	"strconv"
	"strings"
	"telegram-tax-bot/internal/keyboard"
	"telegram-tax-bot/internal/manager"
	"telegram-tax-bot/internal/model"
	"telegram-tax-bot/internal/utils"

	reportbuilder "telegram-tax-bot/internal/report_builder"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (r *Registry) handleCallback(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	session := manager.GetSession(userID)
	data := callback.Data
	chatID := callback.Message.Chat.ID
	message := callback.Message

	// Remove inline keyboard from the message that triggered the callback
	removeInlineKeyboard(r.bot, chatID, message.MessageID)

	switch data {
	case "start":
		handleStartCommand(session, message, r.bot)
	case "help":
		handleHelpCommand(message, r.bot)
	case "reset":
		handleResetCommand(session, message, r.bot)
	case "set_date":
		handleSetDateCommand(session, message, r.bot)
	case "upload_report", "upload_file":
		handleUploadCommand(session, message, r.bot)
	case "periods":
		handlePeriodsCommand(session, message, r.bot)
	case "add_gap_period":
		handleAddGapPeriod(session, callback, r.bot)
	case "adjust_next_in":
		handleAdjustNextIn(session, message, r.bot)
	case "keep_conflict":
		handleKeepConflict(session, message, r.bot)
	case "cancel_edit":
		handleCancelEdit(session, message, r.bot)
	case "show_report":
		handleShowReport(session, message, r.bot)

	case "add_period":
		handleAddPeriod(message, r.bot)

	case "add_tail":
		handleAddTail(session, message, r.bot)

	case "add_head":
		handleAddHead(session, message, r.bot)

	case "add_full":
		handleAddFull(session, message, r.bot)

	case "edit_period":
		handleEditPeriod(session, message, r.bot)

	case "adjust_prev_out":
		handleAdjustPrevOut(session, callback.Message, r.bot)
		handlePeriodsCommand(session, callback.Message, r.bot)

	case "edit_in":
		handleEdinIn(session, callback.Message, r.bot)

	case "edit_out":
		handleEditOut(session, callback.Message, r.bot)

	case "edit_country":
		handleEditCountry(session, callback.Message, r.bot)

	default:
		r.bot.Send(tgbotapi.NewMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞."))
	}

	r.bot.Request(tgbotapi.NewCallback(callback.ID, ""))
}

func handleStartCommand(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	reply := tgbotapi.NewMessage(msg.Chat.ID, "üîò –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	reply.ReplyMarkup = keyboard.BuildMainMenu(s)
	bot.Send(reply)
}

func handleHelpCommand(msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	helpText := `‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ª–æ–≥–æ–≤–æ–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö.

üìé –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?
1. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ JSON-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫ (–ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª¬ª).
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /upload_report –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üìé.
3. –ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç, –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –ø—Ä–æ–≤–µ–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥.

üìÖ –ö–∞–∫ –∑–∞–¥–∞—Ç—å –¥–∞—Ç—É —Ä–∞—Å—á—ë—Ç–∞?
‚Äî –ù–∞–∂–º–∏—Ç–µ ¬´üìÖ –ó–∞–¥–∞—Ç—å –¥–∞—Ç—É¬ª –∏ —É–∫–∞–∂–∏—Ç–µ –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω —Ä–∞—Å—á—ë—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.04.2025).

üìä –ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –æ—Ç—á—ë—Ç?
‚Äî –°—Ç—Ä–∞–Ω—É, –≥–¥–µ –≤—ã –ø—Ä–æ–≤–µ–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–Ω–µ–π.
‚Äî –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∞ —Å 183+ –¥–Ω—è–º–∏ ‚Äî –≤—ã –Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã.

üîÅ –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Äî /reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
‚Äî /periods ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤

üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`

	newMsg := tgbotapi.NewMessage(msg.Chat.ID, helpText)
	newMsg.ReplyMarkup = keyboard.BuildBackToMenu()
	bot.Send(newMsg)
}

func handleCommandsCommand(msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	txt := `/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —Å–ø—Ä–∞–≤–∫–∞
/upload_report - –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
/periods - –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–∏–æ–¥—ã
/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`
	newMsg := tgbotapi.NewMessage(msg.Chat.ID, txt)
	newMsg.ReplyMarkup = keyboard.BuildBackToMenu()
	bot.Send(newMsg)
}

func handleResetCommand(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if s.IsEmpty() {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."))
		return
	}
	s.Data = model.Data{}
	s.Backup = model.Data{}
	s.Temp = nil
	_ = os.Remove(fmt.Sprintf("%s/data.json", s.HistoryDir))
	s.SaveSession()

	newMsg := tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")
	newMsg.ReplyMarkup = keyboard.BuildBackToMenu()
	bot.Send(newMsg)
}

func handleSetDateCommand(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if s.IsEmpty() {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."))
		return
	}
	s.PendingAction = "awaiting_date"
	s.SaveSession()
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"))
}

func handleUploadCommand(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.Data.Current = "upload_pending"
	s.SaveSession()

	newMsg := tgbotapi.NewMessage(msg.Chat.ID, "üìé –ü—Ä–∏—à–ª–∏—Ç–µ JSON-—Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.")
	newMsg.ReplyMarkup = keyboard.BuildBackToMenu()
	bot.Send(newMsg)
}

func handlePeriodsCommand(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if s.IsEmpty() {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."))
		return
	}
	msgText := s.BuildPeriodsList()
	newMsg := tgbotapi.NewMessage(msg.Chat.ID, msgText)
	newMsg.ReplyMarkup = keyboard.BuildPeriodsMenu()
	bot.Send(newMsg)
}

func handleAddGapPeriod(s *model.Session, callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	chatID := callback.Message.Chat.ID

	newIn, _ := utils.ParseDate(s.TempEditedIn)
	prev := s.Data.Periods[s.EditingIndex-1]

	prevOut, _ := utils.ParseDate(prev.Out)
	newGapStart := prevOut.AddDate(0, 0, 1)
	newGapEnd := newIn.AddDate(0, 0, -1)

	newGap := model.Period{
		In:      newGapStart.Format("02.01.2006"),
		Out:     newGapEnd.Format("02.01.2006"),
		Country: "unknown",
	}

	// –í—Å—Ç–∞–≤–∏—Ç—å "unknown" –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–∏–º
	s.Data.Periods = append(
		s.Data.Periods[:s.EditingIndex],
		append([]model.Period{newGap}, s.Data.Periods[s.EditingIndex:]...)...,
	)

	// –û–±–Ω–æ–≤–ª—è–µ–º in —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	s.Data.Periods[s.EditingIndex+1].In = newIn.Format("02.01.2006")
	s.EditingIndex++ // –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
	s.PendingAction = ""
	s.TempEditedIn = ""
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(chatID, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ ¬´unknown¬ª. –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	handlePeriodsCommand(s, callback.Message, bot)
}

func handleAdjustNextIn(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	index := s.EditingIndex
	if index+1 >= len(s.Data.Periods) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –û—à–∏–±–∫–∞: —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."))
		return
	}

	newOut, err := utils.ParseDate(s.TempEditedOut)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã."))
		return
	}

	// ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º out —É —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ in —É —Å–ª–µ–¥—É—é—â–µ–≥–æ
	s.Data.Periods[index].Out = s.TempEditedOut
	s.Data.Periods[index+1].In = newOut.AddDate(0, 0, 1).Format("02.01.2006")

	s.PendingAction = ""
	s.TempEditedOut = ""
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üìå –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ —Å–¥–≤–∏–Ω—É—Ç, –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	handlePeriodsCommand(s, msg, bot)
}

func handleKeepConflict(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if s.PendingAction == "confirm_conflict_in" {
		s.Data.Periods[s.EditingIndex].In = s.TempEditedIn
		s.PendingAction = ""
		s.SaveSession()
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	} else if s.PendingAction == "confirm_conflict_out" {
		s.Data.Periods[s.EditingIndex].Out = s.TempEditedOut
		s.PendingAction = ""
		s.SaveSession()
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	} else {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –ù–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞."))
		return
	}

	handlePeriodsCommand(s, msg, bot)
}

func handleCancelEdit(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.PendingAction = ""
	s.TempEditedOut = ""
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."))
	handlePeriodsCommand(s, msg, bot)
}

// handleBack cancels the current step and shows the appropriate menu.
func handleBack(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	switch s.PendingAction {
	case "awaiting_edit_index":
		s.PendingAction = ""
		s.SaveSession()
		handlePeriodsCommand(s, msg, bot)
	case "awaiting_delete_index":
		s.PendingAction = ""
		s.SaveSession()
		handlePeriodsCommand(s, msg, bot)
	case "awaiting_edit_field":
		handleEditPeriod(s, msg, bot)
	case "awaiting_new_in", "awaiting_new_out", "awaiting_new_country":
		s.PendingAction = "awaiting_edit_field"
		s.SaveSession()
		buttons := keyboard.BuildEditFieldMenu()
		from := s.Data.Periods[s.EditingIndex].In
		till := s.Data.Periods[s.EditingIndex].Out
		txt := fmt.Sprintf("–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ —Å %s –ø–æ %s. –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", from, till)
		reply := tgbotapi.NewMessage(msg.Chat.ID, txt)
		reply.ReplyMarkup = buttons
		bot.Send(reply)
	default:
		handleStartCommand(s, msg, bot)
	}
}

func handleShowReport(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	report := reportbuilder.BuildReport(s.Data)
	reply := tgbotapi.NewMessage(msg.Chat.ID, report)
	reply.ReplyMarkup = keyboard.BuildBackToMenu()
	bot.Send(reply)
}

func handleAddPeriod(msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	// –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
	reply := tgbotapi.NewMessage(msg.Chat.ID, "‚ûï –ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?")
	reply.ReplyMarkup = keyboard.BuildAddPeriodMenu()
	bot.Send(reply)
}

func handleAddTail(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.PendingAction = "awaiting_tail_out"
	s.SaveSession()

	replay := tgbotapi.NewMessage(msg.Chat.ID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
	replay.ReplyMarkup = keyboard.BuildBackToMenu()
	bot.Send(replay)
}

func handleAddHead(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.PendingAction = "awaiting_head_in"
	s.SaveSession()

	replay := tgbotapi.NewMessage(msg.Chat.ID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
	replay.ReplyMarkup = keyboard.BuildBackToMenu()
	bot.Send(replay)
}

func handleAddFull(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.PendingAction = "awaiting_add_in"
	s.SaveSession()

	replay := tgbotapi.NewMessage(msg.Chat.ID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
	replay.ReplyMarkup = keyboard.BuildBackToMenu()
	bot.Send(replay)
}

func handleEditPeriod(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if s.IsEmpty() {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."))
		return
	}

	s.PendingAction = "awaiting_edit_index"
	s.SaveSession()

	text := s.BuildPeriodsList() + "\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
	reply := tgbotapi.NewMessage(msg.Chat.ID, text)
	reply.ReplyMarkup = keyboard.BuildBack()
	bot.Send(reply)
}

func handleAdjustPrevOut(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	newIn, _ := utils.ParseDate(s.TempEditedIn)

	s.Data.Periods[s.EditingIndex-1].Out = newIn.Format("02.01.2006")
	s.Data.Periods[s.EditingIndex].In = newIn.Format("02.01.2006")
	s.PendingAction = ""
	s.TempEditedIn = ""
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üìå –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–≤–∏–Ω—É—Ç. –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	handlePeriodsCommand(s, msg, bot)
}

func handleEdinIn(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.PendingAction = "awaiting_new_in"
	s.SaveSession()
	curr := s.Data.Periods[s.EditingIndex].In
	reply := tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("‚úèÔ∏è –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤—ä–µ–∑–¥–∞: %s. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:", curr))
	reply.ReplyMarkup = keyboard.BuildBack()
	bot.Send(reply)
}

func handleEditOut(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.PendingAction = "awaiting_new_out"
	s.SaveSession()
	curr := s.Data.Periods[s.EditingIndex].Out
	reply := tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("‚úèÔ∏è –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: %s. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:", curr))
	reply.ReplyMarkup = keyboard.BuildBack()
	bot.Send(reply)
}

func handleEditCountry(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.PendingAction = "awaiting_new_country"
	s.SaveSession()
	reply := tgbotapi.NewMessage(msg.Chat.ID, "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:")
	reply.ReplyMarkup = keyboard.BuildBack()
	bot.Send(reply)
}

func handleDeletePeriod(s *model.Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if s.IsEmpty() {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."))
		return
	}

	s.PendingAction = "awaiting_delete_index"
	s.SaveSession()

	text := s.BuildPeriodsList() + "\nüóë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
	reply := tgbotapi.NewMessage(msg.Chat.ID, text)
	reply.ReplyMarkup = keyboard.BuildBack()
	bot.Send(reply)
}

func handleAwaitingDeleteIndex(msg *tgbotapi.Message, s *model.Session, bot *tgbotapi.BotAPI) {
	index, err := strconv.Atoi(strings.TrimSpace(msg.Text))
	if err != nil || index < 1 || index > len(s.Data.Periods) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞."))
		return
	}

	idx := index - 1
	s.Data.Periods = append(s.Data.Periods[:idx], s.Data.Periods[idx+1:]...)
	s.PendingAction = ""
	s.SaveSession()

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üóë –ü–µ—Ä–∏–æ–¥ —É–¥–∞–ª—ë–Ω."))
	if s.IsEmpty() {
		handleStartCommand(s, msg, bot)
	} else {
		handlePeriodsCommand(s, msg, bot)
	}
}

func formatPeriodList(periods []model.Period, current string) string {
	var builder strings.Builder
	builder.WriteString("üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤:\n\n")
	for i, p := range periods {
		in := p.In
		if in == "" {
			in = "‚Äî"
		}
		out := p.Out
		if out == "" {
			out = "–ø–æ " + current
		}
		flag := ""
		if p.Country == "unknown" {
			flag = "üï≥ "
		} else if code, ok := utils.CountryCodeMap[p.Country]; ok {
			flag = utils.CountryToFlag(code) + " "
		}
		builder.WriteString(fmt.Sprintf("%d. %s%s (%s ‚Äî %s)\n", i+1, flag, p.Country, in, out))
	}
	return builder.String()
}

// removeInlineKeyboard clears the inline keyboard from a message without deleting the message itself.
func removeInlineKeyboard(bot *tgbotapi.BotAPI, chatID int64, messageID int) {
	// Telegram may return an error if the original message is too old or was
	// already edited. We try to clear the markup and silently ignore any
	// failure. Previously the message was deleted on failure, but that lead
	// to losing the user's history. Now we simply ignore the error.
	// No inline keyboards are used anymore, so nothing to remove.
}
