// main.go
// Telegram –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–∞
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞: /start, /help, /reset, /undo, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤, Docker secret/env, –∏—Å—Ç–æ—Ä–∏—è, inline-–∫–Ω–æ–ø–∫–∏

package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"sort"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	dataDir = "./data"
	logDir  = "./logs"
)

type Period struct {
	In      string `json:"in,omitempty"`
	Out     string `json:"out,omitempty"`
	Country string `json:"country"`
}

type Data struct {
	Periods []Period `json:"periods"`
	Current string   `json:"current"`
}

type Session struct {
	UserID     int64
	Data       Data
	Backup     Data
	HistoryDir string
}

var sessions = map[int64]*Session{}

func ensureDirs(userID int64) string {
	path := fmt.Sprintf("%s/%d", dataDir, userID)
	os.MkdirAll(path, 0755)
	return path
}

func getBotToken() string {
	if data, err := os.ReadFile("/run/secrets/telegram_bot_token"); err == nil {
		token := strings.TrimSpace(string(data))

		if token != "" {
			return token
		}
	}

	token := os.Getenv("TELEGRAM_BOT_TOKEN")

	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ /run/secrets/telegram_bot_token –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	return token
}

func parseDate(dateStr string) (time.Time, error) {
	return time.Parse("02.01.2006", dateStr)
}

func formatDate(d time.Time) string {
	return d.Format("02.01.2006")
}

func backupSession(s *Session) {
	b, _ := json.MarshalIndent(s.Data, "", "  ")
	_ = os.WriteFile(fmt.Sprintf("%s/backup.json", s.HistoryDir), b, 0644)
	s.Backup = s.Data
}

func undoSession(s *Session) string {
	if len(s.Backup.Periods) == 0 {
		return "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞."
	}
	s.Data = s.Backup
	saveSession(s)
	return "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
}

func saveSession(s *Session) {
	b, _ := json.MarshalIndent(s.Data, "", "  ")
	_ = os.WriteFile(fmt.Sprintf("%s/data.json", s.HistoryDir), b, 0644)
	t := time.Now().Format("2006-01-02_15-04-05")
	_ = os.WriteFile(fmt.Sprintf("%s/report_%s.txt", s.HistoryDir, t), []byte(buildReport(s.Data)), 0644)
}

func buildReport(data Data) string {
	calcDate, _ := parseDate(data.Current)
	oneYearAgo := calcDate.AddDate(-1, 0, 0).AddDate(0, 0, 1)
	countryDays := make(map[string]int)
	var previousOutDate time.Time

	for i, period := range data.Periods {
		var inDate, outDate time.Time
		if period.Out != "" {
			outDate, _ = parseDate(period.Out)
		} else {
			outDate = calcDate
		}
		if i == 0 && period.In == "" {
			inDate = oneYearAgo
			if outDate.Before(oneYearAgo) {
				continue
			}
		} else {
			inDate, _ = parseDate(period.In)
		}
		if i > 0 && inDate.Before(previousOutDate) {
			return fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–µ—Ä–∏–æ–¥—ã –Ω–µ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–µ—Ä–∏–æ–¥ %d)", i+1)
		}
		previousOutDate = outDate
		if outDate.Before(oneYearAgo) {
			continue
		}
		if inDate.Before(oneYearAgo) {
			inDate = oneYearAgo
		}
		if outDate.After(calcDate) {
			outDate = calcDate
		}
		if inDate.After(outDate) {
			continue
		}
		effectiveOutDate := outDate.AddDate(0, 0, 1)
		days := int(effectiveOutDate.Sub(inDate).Hours() / 24)
		countryDays[period.Country] += days
	}
	if len(countryDays) == 0 {
		return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
	}
	type stat struct {
		Country string
		Days    int
	}
	var stats []stat
	for c, d := range countryDays {
		stats = append(stats, stat{c, d})
	}
	sort.Slice(stats, func(i, j int) bool {
		return stats[i].Days > stats[j].Days
	})
	builder := strings.Builder{}
	builder.WriteString(fmt.Sprintf("–ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥: %s ‚Äî %s\n\n", formatDate(oneYearAgo), formatDate(calcDate)))
	for _, s := range stats {
		builder.WriteString(fmt.Sprintf("%s: %d –¥–Ω–µ–π\n", s.Country, s.Days))
	}
	builder.WriteString("\n")
	if stats[0].Days >= 183 {
		builder.WriteString(fmt.Sprintf("üè≥Ô∏è –ù–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç: %s (%d –¥–Ω–µ–π)", stats[0].Country, stats[0].Days))
	} else {
		builder.WriteString(fmt.Sprintf("–ù–µ—Ç —Å—Ç—Ä–∞–Ω—ã —Å >=183 –¥–Ω—è–º–∏. –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤: %s (%d –¥–Ω–µ–π)", stats[0].Country, stats[0].Days))
	}
	return builder.String()
}

func main() {
	bot, err := tgbotapi.NewBotAPI(getBotToken())
	if err != nil {
		log.Panic(err)
	}
	log.Printf("–ó–∞–ø—É—â–µ–Ω –±–æ—Ç: %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		msg := update.Message
		uid := msg.Chat.ID

		if _, ok := sessions[uid]; !ok {
			sessions[uid] = &Session{UserID: uid, HistoryDir: ensureDirs(uid)}
		}
		s := sessions[uid]

		switch {
		case msg.IsCommand():
			switch msg.Command() {
			case "start":
				bot.Send(tgbotapi.NewMessage(uid, "üëã –ü—Ä–∏—à–ª–∏ JSON-—Ñ–∞–π–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help"))
			case "help":
				bot.Send(tgbotapi.NewMessage(uid, "üìò –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞—Ç—å\n/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n/reset ‚Äî —Å–±—Ä–æ—Å\n/undo ‚Äî –æ—Ç–∫–∞—Ç\n–î–æ–±–∞–≤–ª—è–π –ø–µ—Ä–∏–æ–¥—ã: '–¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ 01.01.2024 - 10.01.2024 –ì—Ä—É–∑–∏—è'\n–†–µ–¥–∞–∫—Ç–∏—Ä—É–π: '–∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ 2 in 05.01.2024 out 15.01.2024 —Å—Ç—Ä–∞–Ω–∞ –¢—É—Ä—Ü–∏—è'"))
			case "reset":
				s.Data = Data{}
				bot.Send(tgbotapi.NewMessage(uid, "üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã."))
			case "undo":
				resp := undoSession(s)
				bot.Send(tgbotapi.NewMessage(uid, resp))
			}

		case msg.Document != nil:
			file, _ := bot.GetFile(tgbotapi.FileConfig{FileID: msg.Document.FileID})
			url := file.Link(bot.Token)
			resp, err := http.Get(url)

			if err != nil {
				bot.Send(tgbotapi.NewMessage(uid, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"))
				continue
			}

			body, err := io.ReadAll(resp.Body)
			resp.Body.Close()

			if err != nil {
				bot.Send(tgbotapi.NewMessage(uid, "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞"))
				continue
			}

			if err := json.Unmarshal(body, &s.Data); err != nil {
				bot.Send(tgbotapi.NewMessage(uid, "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON"))
				continue
			}

			backupSession(s)
			saveSession(s)

			report := buildReport(s.Data)
			sendReport(bot, uid, report)

		case strings.HasPrefix(strings.ToLower(msg.Text), "–¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥"):
			parts := strings.Split(msg.Text, " ")
			if len(parts) >= 5 {
				p := Period{In: parts[2], Out: parts[4], Country: strings.Join(parts[5:], " ")}
				s.Backup = s.Data
				s.Data.Periods = append(s.Data.Periods, p)
				saveSession(s)
				report := buildReport(s.Data)
				sendReport(bot, uid, report)
			} else {
				bot.Send(tgbotapi.NewMessage(uid, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ 01.01.2024 - 10.01.2024 –ì—Ä—É–∑–∏—è"))
			}

		case strings.HasPrefix(strings.ToLower(msg.Text), "–∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥"):
			// –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é
			bot.Send(tgbotapi.NewMessage(uid, "‚úèÔ∏è –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–Ω–∞!"))

		default:
			bot.Send(tgbotapi.NewMessage(uid, "ü§ñ –Ø –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ /help –∏–ª–∏ –ø—Ä–∏—à–ª–∏ JSON."))
		}
	}
}

func sendReport(bot *tgbotapi.BotAPI, chatID int64, report string) {
	msg := tgbotapi.NewMessage(chatID, report)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—á—ë—Ç", "repeat"),
			tgbotapi.NewInlineKeyboardButtonData("–°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "reset"),
		),
	)
	bot.Send(msg)
}
