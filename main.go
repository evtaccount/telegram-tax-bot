package main

import (
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	bot, err := tgbotapi.NewBotAPI(getBotToken())
	if err != nil {
		log.Panic(err)
	}
	log.Printf("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @%s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {

		// === üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ ===
		if update.CallbackQuery != nil {
			callback := update.CallbackQuery
			userID := callback.From.ID
			s := getSession(userID)
			data := callback.Data
			chatID := callback.Message.Chat.ID

			switch data {
			case "start":
				handleStartCommand(s, callback.Message, bot)
			case "help":
				handleHelpCommand(callback.Message, bot)
			case "reset":
				handleResetCommand(s, callback.Message, bot)
			case "set_date":
				handleSetDateCommand(s, callback.Message, bot)
			case "upload_report", "upload_file":
				handleUploadCommand(s, callback.Message, bot)
			case "periods":
				handlePeriodsCommand(s, callback.Message, bot)
			case "add_gap_period":
				handleAddGapPeriod(s, callback, bot)
			case "adjust_next_in":
				handleAdjustNextIn(s, callback.Message, bot)
			case "keep_conflict":
				handleKeepConflict(callback.Message, s, bot)
			case "cancel_edit":
				handleCancelEdit(s, callback.Message, bot)
			case "show_report":
				report := buildReport(s.Data)
				msg := tgbotapi.NewMessage(chatID, report)
				msg.ReplyMarkup = buildBackToMenu()
				bot.Send(msg)
			case "add_period":
				// –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
				reply := tgbotapi.NewMessage(chatID, "‚ûï –ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?")
				reply.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üóì –•–≤–æ—Å—Ç–æ–≤–æ–π (—Ç–æ–ª—å–∫–æ –≤—ã–µ–∑–¥)", "add_tail"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("‚èÆ –ù–∞—á–∞–ª—å–Ω—ã–π (—Ç–æ–ª—å–∫–æ –≤—ä–µ–∑–¥)", "add_head"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üìÑ –ü–æ–ª–Ω—ã–π (–≤—ä–µ–∑–¥+–≤—ã–µ–∑–¥)", "add_full"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "start"),
					),
				)
				bot.Send(reply)

			case "add_tail":
				s.PendingAction = "awaiting_tail_out"
				saveSession(s)

				replay := tgbotapi.NewMessage(chatID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–î–î.MM.YYYY):")
				replay.ReplyMarkup = buildBackToMenu()
				bot.Send(replay)

			case "add_head":
				s.PendingAction = "awaiting_head_in"
				saveSession(s)

				replay := tgbotapi.NewMessage(chatID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ (–î–î.MM.YYYY):")
				replay.ReplyMarkup = buildBackToMenu()
				bot.Send(replay)

			case "add_full":
				s.PendingAction = "awaiting_full_in"
				saveSession(s)

				replay := tgbotapi.NewMessage(chatID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ (–î–î.MM.YYYY):")
				replay.ReplyMarkup = buildBackToMenu()
				bot.Send(replay)
				if isEmpty(s) {
					bot.Send(tgbotapi.NewMessage(chatID, "üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."))
				} else {
					s.PendingAction = "awaiting_delete_index"
					saveSession(s)
					bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:"))
				}
			case "edit_period":
				if isEmpty(s) {
					bot.Send(tgbotapi.NewMessage(chatID, "üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."))
				} else {
					s.PendingAction = "awaiting_edit_index"
					saveSession(s)
					bot.Send(tgbotapi.NewMessage(chatID, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"))
				}
			case "adjust_prev_out":
				newIn, _ := parseDate(s.TempEditedIn)
				s.Data.Periods[s.EditingIndex-1].Out = newIn.Format("02.01.2006")
				s.Data.Periods[s.EditingIndex].In = newIn.Format("02.01.2006")
				s.PendingAction = ""
				s.TempEditedIn = ""
				saveSession(s)
				bot.Send(tgbotapi.NewMessage(chatID, "üìå –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–≤–∏–Ω—É—Ç. –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
				handlePeriodsCommand(s, callback.Message, bot)
			case "edit_in":
				s.PendingAction = "awaiting_new_in"
				saveSession(s)
				curr := s.Data.Periods[s.EditingIndex].In
				bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úèÔ∏è –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ %s. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞:", curr)))
			case "edit_out":
				s.PendingAction = "awaiting_new_out"
				saveSession(s)
				curr := s.Data.Periods[s.EditingIndex].Out
				bot.Send(tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úèÔ∏è –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ %s. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:", curr)))
			case "edit_country":
				s.PendingAction = "awaiting_new_country"
				saveSession(s)
				bot.Send(tgbotapi.NewMessage(chatID, "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:"))
			default:
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞."))
			}

			bot.Request(tgbotapi.NewCallback(callback.ID, ""))
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		if update.Message != nil {
			msg := update.Message
			userID := msg.From.ID
			s := getSession(userID)
			text := msg.Text

			switch s.PendingAction {
			case "awaiting_edit_index":
				handleAwaitingEditIndex(msg, s, bot)
				return
			case "awaiting_date":
				handleAwaitingDate(msg, s, bot)
				return
			case "awaiting_new_in":
				handleAwaitingNewIn(msg, s, bot)
				return
			case "awaiting_new_out":
				handleAwaitingNewOut(msg, s, bot)
				return
			case "awaiting_new_country":
				handleAwaitingNewCountry(msg, s, bot)
				return
			case "awaiting_add_out":
				handleAwaitingAddOut(msg, s, bot)
				return
			case "awaiting_add_country":
				handleAwaitingAddCountry(msg, s, bot)
				return
			case "awaiting_add_open_country":
				handleAddOpenCountry(msg, s, bot)
			case "awaiting_add_in":
				text := strings.TrimSpace(msg.Text)
				_, err := parseDate(text)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"))
					return
				}
				s.Temp = []Period{{In: text}} // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É in –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
				s.PendingAction = "awaiting_add_out"
				saveSession(s)
				bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):"))
			}

			// ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ JSON-—Ñ–∞–π–ª–∞
			if msg.Document != nil && s.Data.Current == "upload_pending" {
				handleInputFile(msg, s, bot)
				continue
			}

			// ‚úÖ –ö–æ–º–∞–Ω–¥—ã
			switch {
			case strings.HasPrefix(text, "/start"):
				handleStartCommand(s, msg, bot)
			case strings.HasPrefix(text, "/help"):
				handleHelpCommand(msg, bot)
			default:
				if strings.HasPrefix(text, "{") {
					handleJSONInput(msg, s, bot)
				} else {
					bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞."))
				}
			}
		}
	}
}

var sessions = map[int64]*Session{}

var countryCodeMap = map[string]string{
	"–ê–≤—Å—Ç—Ä–∞–ª–∏—è":            "AU",
	"–ê–≤—Å—Ç—Ä–∏—è":              "AT",
	"–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω":          "AZ",
	"–ê–ª–±–∞–Ω–∏—è":              "AL",
	"–ê–ª–∂–∏—Ä":                "DZ",
	"–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–µ –°–∞–º–æ–∞":   "AS",
	"–ê–Ω–≥–æ–ª–∞":               "AO",
	"–ê–Ω–¥–æ—Ä—Ä–∞":              "AD",
	"–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞":            "AR",
	"–ê—Ä–º–µ–Ω–∏—è":              "AM",
	"–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω":           "AF",
	"–ë–∞–Ω–≥–ª–∞–¥–µ—à":            "BD",
	"–ë–µ–ª–∞—Ä—É—Å—å":             "BY",
	"–ë–µ–ª—å–≥–∏—è":              "BE",
	"–ë–æ–ª–≥–∞—Ä–∏—è":             "BG",
	"–ë–æ–ª–∏–≤–∏—è":              "BO",
	"–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞": "BA",
	"–ë—Ä–∞–∑–∏–ª–∏—è":             "BR",
	"–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è":       "GB",
	"–í–µ–Ω–≥—Ä–∏—è":              "HU",
	"–í–µ–Ω–µ—Å—É—ç–ª–∞":            "VE",
	"–í—å–µ—Ç–Ω–∞–º":              "VN",
	"–ì–µ—Ä–º–∞–Ω–∏—è":             "DE",
	"–ì–æ–Ω–∫–æ–Ω–≥":              "HK",
	"–ì—Ä–µ—Ü–∏—è":               "GR",
	"–ì—Ä—É–∑–∏—è":               "GE",
	"–î–∞–Ω–∏—è":                "DK",
	"–ï–≥–∏–ø–µ—Ç":               "EG",
	"–ò–∑—Ä–∞–∏–ª—å":              "IL",
	"–ò–Ω–¥–∏—è":                "IN",
	"–ò–Ω–¥–æ–Ω–µ–∑–∏—è":            "ID",
	"–ò–æ—Ä–¥–∞–Ω–∏—è":             "JO",
	"–ò—Ä–∞–∫":                 "IQ",
	"–ò—Ä–∞–Ω":                 "IR",
	"–ò—Ä–ª–∞–Ω–¥–∏—è":             "IE",
	"–ò—Å–ª–∞–Ω–¥–∏—è":             "IS",
	"–ò—Å–ø–∞–Ω–∏—è":              "ES",
	"–ò—Ç–∞–ª–∏—è":               "IT",
	"–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω":            "KZ",
	"–ö–∞–º–±–æ–¥–∂–∞":             "KH",
	"–ö–∞–Ω–∞–¥–∞":               "CA",
	"–ö–∞—Ç–∞—Ä":                "QA",
	"–ö–µ–Ω–∏—è":                "KE",
	"–ö–∏–ø—Ä":                 "CY",
	"–ö–∏—Ç–∞–π":                "CN",
	"–ö–æ–ª—É–º–±–∏—è":             "CO",
	"–ö–æ—Å—Ç–∞-–†–∏–∫–∞":           "CR",
	"–ö—É–±–∞":                 "CU",
	"–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω":           "KG",
	"–õ–∞—Ç–≤–∏—è":               "LV",
	"–õ–∏–≤–∞–Ω":                "LB",
	"–õ–∏—Ç–≤–∞":                "LT",
	"–õ—é–∫—Å–µ–º–±—É—Ä–≥":           "LU",
	"–ú–∞–ª–∞–π–∑–∏—è":             "MY",
	"–ú–∞–ª—å—Ç–∞":               "MT",
	"–ú–∞—Ä–æ–∫–∫–æ":              "MA",
	"–ú–µ–∫—Å–∏–∫–∞":              "MX",
	"–ú–æ–ª–¥–æ–≤–∞":              "MD",
	"–ú–æ–Ω–≥–æ–ª–∏—è":             "MN",
	"–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã":           "NL",
	"–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è":       "NZ",
	"–ù–æ—Ä–≤–µ–≥–∏—è":             "NO",
	"–û–ê–≠":                  "AE",
	"–ü–∞–∫–∏—Å—Ç–∞–Ω":             "PK",
	"–ü–∞–Ω–∞–º–∞":               "PA",
	"–ü–µ—Ä—É":                 "PE",
	"–ü–æ–ª—å—à–∞":               "PL",
	"–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è":           "PT",
	"–†–æ—Å—Å–∏—è":               "RU",
	"–†—É–º—ã–Ω–∏—è":              "RO",
	"–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è":    "SA",
	"–°–µ—Ä–±–∏—è":               "RS",
	"–°–∏–Ω–≥–∞–ø—É—Ä":             "SG",
	"–°–ª–æ–≤–∞–∫–∏—è":             "SK",
	"–°–ª–æ–≤–µ–Ω–∏—è":             "SI",
	"–°–®–ê":                  "US",
	"–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω":          "TJ",
	"–¢–∞–∏–ª–∞–Ω–¥":              "TH",
	"–¢—É–Ω–∏—Å":                "TN",
	"–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω":         "TM",
	"–¢—É—Ä—Ü–∏—è":               "TR",
	"–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω":           "UZ",
	"–£–∫—Ä–∞–∏–Ω–∞":              "UA",
	"–§–∏–ª–∏–ø–ø–∏–Ω—ã":            "PH",
	"–§–∏–Ω–ª—è–Ω–¥–∏—è":            "FI",
	"–§—Ä–∞–Ω—Ü–∏—è":              "FR",
	"–•–æ—Ä–≤–∞—Ç–∏—è":             "HR",
	"–ß–µ—Ö–∏—è":                "CZ",
	"–ß–∏–ª–∏":                 "CL",
	"–®–≤–µ–π—Ü–∞—Ä–∏—è":            "CH",
	"–®–≤–µ—Ü–∏—è":               "SE",
	"–®—Ä–∏-–õ–∞–Ω–∫–∞":            "LK",
	"–≠—Å—Ç–æ–Ω–∏—è":              "EE",
	"–Æ–ê–†":                  "ZA",
	"–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è":          "KR",
	"–Ø–ø–æ–Ω–∏—è":               "JP",
}

const (
	dataDir = "./data"
	logDir  = "./logs"
)
