package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"sort"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	dataDir = "./data"
	logDir  = "./logs"
)

type Period struct {
	In      string `json:"in,omitempty"`
	Out     string `json:"out,omitempty"`
	Country string `json:"country"`
}

type Data struct {
	Periods []Period `json:"periods"`
	Current string   `json:"current"`
}

type Session struct {
	UserID        int64
	Data          Data
	Backup        Data
	HistoryDir    string
	Temp          []Period
	EditingIndex  int
	PendingAction string
	TempDate      string
}

var sessions = map[int64]*Session{}
var countryCodeMap = map[string]string{
	"–ê–≤—Å—Ç—Ä–∞–ª–∏—è":            "AU",
	"–ê–≤—Å—Ç—Ä–∏—è":              "AT",
	"–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω":          "AZ",
	"–ê–ª–±–∞–Ω–∏—è":              "AL",
	"–ê–ª–∂–∏—Ä":                "DZ",
	"–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–µ –°–∞–º–æ–∞":   "AS",
	"–ê–Ω–≥–æ–ª–∞":               "AO",
	"–ê–Ω–¥–æ—Ä—Ä–∞":              "AD",
	"–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞":            "AR",
	"–ê—Ä–º–µ–Ω–∏—è":              "AM",
	"–ê—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω":           "AF",
	"–ë–∞–Ω–≥–ª–∞–¥–µ—à":            "BD",
	"–ë–µ–ª–∞—Ä—É—Å—å":             "BY",
	"–ë–µ–ª—å–≥–∏—è":              "BE",
	"–ë–æ–ª–≥–∞—Ä–∏—è":             "BG",
	"–ë–æ–ª–∏–≤–∏—è":              "BO",
	"–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞": "BA",
	"–ë—Ä–∞–∑–∏–ª–∏—è":             "BR",
	"–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è":       "GB",
	"–í–µ–Ω–≥—Ä–∏—è":              "HU",
	"–í–µ–Ω–µ—Å—É—ç–ª–∞":            "VE",
	"–í—å–µ—Ç–Ω–∞–º":              "VN",
	"–ì–µ—Ä–º–∞–Ω–∏—è":             "DE",
	"–ì–æ–Ω–∫–æ–Ω–≥":              "HK",
	"–ì—Ä–µ—Ü–∏—è":               "GR",
	"–ì—Ä—É–∑–∏—è":               "GE",
	"–î–∞–Ω–∏—è":                "DK",
	"–ï–≥–∏–ø–µ—Ç":               "EG",
	"–ò–∑—Ä–∞–∏–ª—å":              "IL",
	"–ò–Ω–¥–∏—è":                "IN",
	"–ò–Ω–¥–æ–Ω–µ–∑–∏—è":            "ID",
	"–ò–æ—Ä–¥–∞–Ω–∏—è":             "JO",
	"–ò—Ä–∞–∫":                 "IQ",
	"–ò—Ä–∞–Ω":                 "IR",
	"–ò—Ä–ª–∞–Ω–¥–∏—è":             "IE",
	"–ò—Å–ª–∞–Ω–¥–∏—è":             "IS",
	"–ò—Å–ø–∞–Ω–∏—è":              "ES",
	"–ò—Ç–∞–ª–∏—è":               "IT",
	"–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω":            "KZ",
	"–ö–∞–º–±–æ–¥–∂–∞":             "KH",
	"–ö–∞–Ω–∞–¥–∞":               "CA",
	"–ö–∞—Ç–∞—Ä":                "QA",
	"–ö–µ–Ω–∏—è":                "KE",
	"–ö–∏–ø—Ä":                 "CY",
	"–ö–∏—Ç–∞–π":                "CN",
	"–ö–æ–ª—É–º–±–∏—è":             "CO",
	"–ö–æ—Å—Ç–∞-–†–∏–∫–∞":           "CR",
	"–ö—É–±–∞":                 "CU",
	"–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω":           "KG",
	"–õ–∞—Ç–≤–∏—è":               "LV",
	"–õ–∏–≤–∞–Ω":                "LB",
	"–õ–∏—Ç–≤–∞":                "LT",
	"–õ—é–∫—Å–µ–º–±—É—Ä–≥":           "LU",
	"–ú–∞–ª–∞–π–∑–∏—è":             "MY",
	"–ú–∞–ª—å—Ç–∞":               "MT",
	"–ú–∞—Ä–æ–∫–∫–æ":              "MA",
	"–ú–µ–∫—Å–∏–∫–∞":              "MX",
	"–ú–æ–ª–¥–æ–≤–∞":              "MD",
	"–ú–æ–Ω–≥–æ–ª–∏—è":             "MN",
	"–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã":           "NL",
	"–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è":       "NZ",
	"–ù–æ—Ä–≤–µ–≥–∏—è":             "NO",
	"–û–ê–≠":                  "AE",
	"–ü–∞–∫–∏—Å—Ç–∞–Ω":             "PK",
	"–ü–∞–Ω–∞–º–∞":               "PA",
	"–ü–µ—Ä—É":                 "PE",
	"–ü–æ–ª—å—à–∞":               "PL",
	"–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è":           "PT",
	"–†–æ—Å—Å–∏—è":               "RU",
	"–†—É–º—ã–Ω–∏—è":              "RO",
	"–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è":    "SA",
	"–°–µ—Ä–±–∏—è":               "RS",
	"–°–∏–Ω–≥–∞–ø—É—Ä":             "SG",
	"–°–ª–æ–≤–∞–∫–∏—è":             "SK",
	"–°–ª–æ–≤–µ–Ω–∏—è":             "SI",
	"–°–®–ê":                  "US",
	"–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω":          "TJ",
	"–¢–∞–∏–ª–∞–Ω–¥":              "TH",
	"–¢—É–Ω–∏—Å":                "TN",
	"–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω":         "TM",
	"–¢—É—Ä—Ü–∏—è":               "TR",
	"–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω":           "UZ",
	"–£–∫—Ä–∞–∏–Ω–∞":              "UA",
	"–§–∏–ª–∏–ø–ø–∏–Ω—ã":            "PH",
	"–§–∏–Ω–ª—è–Ω–¥–∏—è":            "FI",
	"–§—Ä–∞–Ω—Ü–∏—è":              "FR",
	"–•–æ—Ä–≤–∞—Ç–∏—è":             "HR",
	"–ß–µ—Ö–∏—è":                "CZ",
	"–ß–∏–ª–∏":                 "CL",
	"–®–≤–µ–π—Ü–∞—Ä–∏—è":            "CH",
	"–®–≤–µ—Ü–∏—è":               "SE",
	"–®—Ä–∏-–õ–∞–Ω–∫–∞":            "LK",
	"–≠—Å—Ç–æ–Ω–∏—è":              "EE",
	"–Æ–ê–†":                  "ZA",
	"–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è":          "KR",
	"–Ø–ø–æ–Ω–∏—è":               "JP",
}

func ensureDirs(userID int64) string {
	path := fmt.Sprintf("%s/%d", dataDir, userID)
	os.MkdirAll(path, 0755)
	return path
}

func getBotToken() string {
	if data, err := os.ReadFile("/run/secrets/telegram_bot_token"); err == nil {
		token := strings.TrimSpace(string(data))
		if token != "" {
			log.Println("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ Docker Secret (/run/secrets/telegram_bot_token)")
			return token
		}
	}
	token := strings.TrimSpace(os.Getenv("TELEGRAM_BOT_TOKEN"))
	if token != "" {
		log.Println("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (TELEGRAM_BOT_TOKEN)")
		return token
	}
	log.Fatal("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ Docker Secret, –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	return ""
}

func countryToFlag(isoCode string) string {
	isoCode = strings.ToUpper(isoCode)
	if len(isoCode) != 2 {
		return ""
	}
	return string(rune(0x1F1E6+int(isoCode[0]-'A'))) + string(rune(0x1F1E6+int(isoCode[1]-'A')))
}

func parseDate(dateStr string) (time.Time, error) {
	return time.Parse("02.01.2006", dateStr)
}

func formatDate(d time.Time) string {
	return d.Format("02.01.2006")
}

func backupSession(s *Session) {
	b, _ := json.MarshalIndent(s.Data, "", "  ")
	_ = os.WriteFile(fmt.Sprintf("%s/backup.json", s.HistoryDir), b, 0644)
	s.Backup = s.Data
}

func saveSession(s *Session) {
	b, _ := json.MarshalIndent(s, "", "  ")
	_ = os.WriteFile(fmt.Sprintf("%s/session.json", s.HistoryDir), b, 0644)
	t := time.Now().Format("2006-01-02_15-04-05")
	_ = os.WriteFile(fmt.Sprintf("%s/report_%s.txt", s.HistoryDir, t), []byte(buildReport(s.Data)), 0644)
}

func loadUserData(s *Session) {
	path := fmt.Sprintf("%s/session.json", s.HistoryDir)
	b, err := os.ReadFile(path)

	if err == nil {
		var restored Session
		if err := json.Unmarshal(b, &restored); err == nil {
			*s = restored
		}
	}
}

func buildReport(data Data) string {
	calcDate, _ := parseDate(data.Current)
	oneYearAgo := calcDate.AddDate(-1, 0, 0).AddDate(0, 0, 1)
	countryDays := make(map[string]int)
	var previousOutDate time.Time

	for i, period := range data.Periods {
		var inDate, outDate time.Time
		if period.Out != "" {
			outDate, _ = parseDate(period.Out)
		} else {
			outDate = calcDate
		}
		if i == 0 && period.In == "" {
			inDate = oneYearAgo
			if outDate.Before(oneYearAgo) {
				continue
			}
		} else {
			inDate, _ = parseDate(period.In)
		}
		if i > 0 && inDate.Before(previousOutDate) {
			return fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–µ—Ä–∏–æ–¥—ã –Ω–µ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–µ—Ä–∏–æ–¥ %d)", i+1)
		}
		previousOutDate = outDate
		if outDate.Before(oneYearAgo) {
			continue
		}
		if inDate.Before(oneYearAgo) {
			inDate = oneYearAgo
		}
		if outDate.After(calcDate) {
			outDate = calcDate
		}
		if inDate.After(outDate) {
			continue
		}
		effectiveOutDate := outDate.AddDate(0, 0, 1)
		days := int(effectiveOutDate.Sub(inDate).Hours() / 24)
		countryDays[period.Country] += days
	}
	if len(countryDays) == 0 {
		return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
	}
	type stat struct {
		Country string
		Days    int
	}
	var stats []stat
	for c, d := range countryDays {
		stats = append(stats, stat{c, d})
	}
	sort.Slice(stats, func(i, j int) bool {
		return stats[i].Days > stats[j].Days
	})
	builder := strings.Builder{}
	builder.WriteString(fmt.Sprintf("–ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥: %s ‚Äî %s\n\n", formatDate(oneYearAgo), formatDate(calcDate)))
	for _, s := range stats {
		iso := countryCodeMap[s.Country]
		flag := countryToFlag(iso)
		builder.WriteString(fmt.Sprintf("%s %s: %d –¥–Ω–µ–π\n", flag, s.Country, s.Days))
	}
	builder.WriteString("\n")
	if stats[0].Days >= 183 {
		iso := countryCodeMap[stats[0].Country]
		flag := countryToFlag(iso)
		builder.WriteString(fmt.Sprintf("%s %s: %d –¥–Ω–µ–π\n", flag, stats[0].Country, stats[0].Days))
	} else {
		builder.WriteString(fmt.Sprintf("–ù–µ—Ç —Å—Ç—Ä–∞–Ω—ã —Å >=183 –¥–Ω—è–º–∏. –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤: %s (%d –¥–Ω–µ–π)", stats[0].Country, stats[0].Days))
	}
	return builder.String()
}

func handleJSONInput(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	backupSession(s)
	err := json.Unmarshal([]byte(msg.Text), &s.Data)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"))
		return
	}
	if s.Data.Current == "" {
		s.Data.Current = time.Now().Format("02.01.2006")
	}
	saveSession(s)
	report := buildReport(s.Data)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, report))
}

func handleAwaitingAddOut(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	if len(s.Temp) == 0 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."))
		s.PendingAction = ""
		return
	}
	date, err := parseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."))
		return
	}
	inDate, err := parseDate(s.Temp[0].In)
	if err != nil || date.Before(inDate) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ä–µ–∑–¥–∞."))
		return
	}
	s.Temp[0].Out = date.Format("02.01.2006")
	s.PendingAction = "awaiting_add_country"
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üåç –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:"))
}

func handleAwaitingAddCountry(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	if len(s.Temp) == 0 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."))
		s.PendingAction = ""
		return
	}
	s.Temp[0].Country = strings.TrimSpace(msg.Text)
	s.Data.Periods = append(s.Data.Periods, s.Temp[0])
	sort.Slice(s.Data.Periods, func(i, j int) bool {
		inI, errI := parseDate(s.Data.Periods[i].In)
		inJ, errJ := parseDate(s.Data.Periods[j].In)
		if errI != nil || errJ != nil {
			return i < j
		}
		return inI.Before(inJ)
	})
	s.Temp = nil
	s.PendingAction = ""
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –ü–µ—Ä–∏–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."))
}

func handleAwaitingNewIn(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	newDate, err := parseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"))
		return
	}

	if s.EditingIndex > 0 {
		prevOut := s.Data.Periods[s.EditingIndex-1].Out
		if prevOut != "" {
			prevOutDate, _ := parseDate(prevOut)

			if newDate.Before(prevOutDate) {
				s.TempDate = newDate.Format("02.01.2006")
				s.PendingAction = "conflict_prev_out"

				row := []tgbotapi.InlineKeyboardButton{
					tgbotapi.NewInlineKeyboardButtonData("üìå –ü–æ–¥–≤–∏–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥", "adjust_prev_out"),
				}

				if prevOutDate.AddDate(0, 0, 1).Equal(newDate) {
					row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", "keep_conflict"))
				}

				row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_edit"))

				msg := tgbotapi.NewMessage(msg.Chat.ID, "üïì –ù–æ–≤–∞—è –¥–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ —Ä–∞–Ω—å—à–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?")
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(row...))
				bot.Send(msg)

				saveSession(s)
				return
			}
		}
	}

	s.Data.Periods[s.EditingIndex].In = newDate.Format("02.01.2006")
	s.PendingAction = ""
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
}

func handleAwaitingNewOut(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	newOut, err := parseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"))
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥–∞—Ç–æ–π in —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	if s.EditingIndex+1 < len(s.Data.Periods) {
		nextIn := s.Data.Periods[s.EditingIndex+1].In
		if nextIn != "" {
			nextInDate, _ := parseDate(nextIn)

			if newOut.After(nextInDate) {
				s.TempDate = newOut.Format("02.01.2006")
				s.PendingAction = "conflict_next_in"

				row := []tgbotapi.InlineKeyboardButton{
					tgbotapi.NewInlineKeyboardButtonData("üìå –ü–æ–¥–≤–∏–Ω—É—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥", "adjust_next_in"),
				}

				if newOut.AddDate(0, 0, 1).Equal(nextInDate) {
					row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", "keep_conflict"))
				}

				row = append(row, tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_edit"))

				msg := tgbotapi.NewMessage(msg.Chat.ID, "üïì –ù–æ–≤–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?")
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(row...))
				bot.Send(msg)

				saveSession(s)
				return
			}
		}
	}

	s.Data.Periods[s.EditingIndex].Out = newOut.Format("02.01.2006")
	s.PendingAction = ""
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
}

func handleAwaitingNewCountry(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	newCountry := strings.TrimSpace(msg.Text)
	if newCountry == "" {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."))
		return
	}
	s.Data.Periods[s.EditingIndex].Country = newCountry
	s.PendingAction = ""
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –°—Ç—Ä–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
}

func handleAwaitingDate(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	date, err := parseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"))
		return
	}
	s.Data.Current = date.Format("02.01.2006")
	s.PendingAction = ""
	saveSession(s)
	report := buildReport(s.Data)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ –î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %s\n\n%s", s.Data.Current, report)))
}

func handleAwaitingEditIndex(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	index, err := strconv.Atoi(strings.TrimSpace(msg.Text))

	if err != nil || index < 1 || index > len(s.Data.Periods) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞."))
		return
	}

	s.EditingIndex = index - 1
	s.PendingAction = "awaiting_edit_field"
	saveSession(s)

	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ (in)", "edit_in"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÜ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (out)", "edit_out"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåç –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", "edit_country"),
		),
	)
	msgText := fmt.Sprintf("–ü–µ—Ä–∏–æ–¥ %d –≤—ã–±—Ä–∞–Ω. –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", index)
	msgToSend := tgbotapi.NewMessage(msg.Chat.ID, msgText)
	msgToSend.ReplyMarkup = buttons
	bot.Send(msgToSend)
}

func main() {
	bot, err := tgbotapi.NewBotAPI(getBotToken())
	if err != nil {
		log.Panic(err)
	}
	log.Printf("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @%s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {

		// === üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ ===
		if update.CallbackQuery != nil {
			callback := update.CallbackQuery
			userID := callback.From.ID
			s := getSession(userID)
			data := callback.Data
			chatID := callback.Message.Chat.ID

			switch data {
			case "start":
				handleStartCommand(s, callback.Message, bot)
			case "help":
				handleHelpCommand(callback.Message, bot)
			case "reset":
				handleResetCommand(s, callback.Message, bot)
			case "set_date":
				handleSetDateCommand(s, callback.Message, bot)
			case "upload_report", "upload_file":
				handleUploadCommand(s, callback.Message, bot)
			case "periods":
				handlePeriodsCommand(s, callback.Message, bot)
			case "adjust_next_in":
				newOut, _ := parseDate(s.TempDate)
				s.Data.Periods[s.EditingIndex+1].In = newOut.Format("02.01.2006")
				s.Data.Periods[s.EditingIndex].Out = newOut.Format("02.01.2006")
				s.PendingAction = ""
				saveSession(s)
				bot.Send(tgbotapi.NewMessage(chatID, "üìå –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–≤–∏–Ω—É—Ç. –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))

			case "keep_conflict":
				if s.PendingAction == "conflict_prev_out" {
					s.Data.Periods[s.EditingIndex].In = s.TempDate
				} else if s.PendingAction == "conflict_next_in" {
					s.Data.Periods[s.EditingIndex].Out = s.TempDate
				}
				s.PendingAction = ""
				saveSession(s)
				bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω."))

			case "cancel_edit":
				s.TempDate = ""
				s.PendingAction = ""
				saveSession(s)
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."))
			case "show_report":
				report := buildReport(s.Data)
				bot.Send(tgbotapi.NewMessage(chatID, report))
			case "add_period":
				s.PendingAction = "awaiting_add_in"
				saveSession(s)
				bot.Send(tgbotapi.NewMessage(chatID, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):"))
			case "delete_period":
				if isEmpty(s) {
					bot.Send(tgbotapi.NewMessage(chatID, "üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."))
				} else {
					s.PendingAction = "awaiting_delete_index"
					saveSession(s)
					bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:"))
				}
			case "edit_period":
				if isEmpty(s) {
					bot.Send(tgbotapi.NewMessage(chatID, "üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."))
				} else {
					s.PendingAction = "awaiting_edit_index"
					saveSession(s)
					bot.Send(tgbotapi.NewMessage(chatID, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"))
				}
			case "adjust_prev_out":
				newIn, _ := parseDate(s.TempDate)
				s.Data.Periods[s.EditingIndex-1].Out = newIn.Format("02.01.2006")
				s.Data.Periods[s.EditingIndex].In = newIn.Format("02.01.2006")
				s.PendingAction = ""
				saveSession(s)
				bot.Send(tgbotapi.NewMessage(chatID, "üìå –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–≤–∏–Ω—É—Ç. –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
			case "edit_in":
				s.PendingAction = "awaiting_new_in"
				saveSession(s)
				bot.Send(tgbotapi.NewMessage(chatID, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):"))
			case "edit_out":
				s.PendingAction = "awaiting_new_out"
				saveSession(s)
				bot.Send(tgbotapi.NewMessage(chatID, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):"))
			case "edit_country":
				s.PendingAction = "awaiting_new_country"
				saveSession(s)
				bot.Send(tgbotapi.NewMessage(chatID, "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:"))
			default:
				bot.Send(tgbotapi.NewMessage(chatID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞."))
			}

			bot.Request(tgbotapi.NewCallback(callback.ID, ""))
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		if update.Message != nil {
			msg := update.Message
			userID := msg.From.ID
			s := getSession(userID)
			text := msg.Text

			switch s.PendingAction {
			case "awaiting_edit_index":
				handleAwaitingEditIndex(msg, s, bot)
				return
			case "awaiting_date":
				handleAwaitingDate(msg, s, bot)
				return
			case "awaiting_new_in":
				handleAwaitingNewIn(msg, s, bot)
				return
			case "awaiting_new_out":
				handleAwaitingNewOut(msg, s, bot)
				return
			case "awaiting_new_country":
				handleAwaitingNewCountry(msg, s, bot)
				return
			case "awaiting_add_out":
				handleAwaitingAddOut(msg, s, bot)
				return
			case "awaiting_add_country":
				handleAwaitingAddCountry(msg, s, bot)
				return
			}

			// ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ JSON-—Ñ–∞–π–ª–∞
			if msg.Document != nil && s.Data.Current == "upload_pending" {
				handleInputFile(msg, s, bot)
				continue
			}

			// ‚úÖ –ö–æ–º–∞–Ω–¥—ã
			switch {
			case strings.HasPrefix(text, "/start"):
				handleStartCommand(s, msg, bot)
			case strings.HasPrefix(text, "/help"):
				handleHelpCommand(msg, bot)
			default:
				if strings.HasPrefix(text, "{") {
					handleJSONInput(msg, s, bot)
				} else {
					bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞."))
				}
			}
		}
	}
}

func handleStartCommand(s *Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	reply := tgbotapi.NewMessage(msg.Chat.ID, "üîò –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	reply.ReplyMarkup = buildMainMenu(s)
	bot.Send(reply)
}

func handleHelpCommand(msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	helpText := `‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ª–æ–≥–æ–≤–æ–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö.

üìé –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?
1. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ JSON-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫ (—Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–º–µ—Ä ‚Äî –ø–æ –∫–Ω–æ–ø–∫–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª").
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /upload_report –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üìé.
3. –ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç, –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –ø—Ä–æ–≤–µ–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥.

üìÖ –ö–∞–∫ –∑–∞–¥–∞—Ç—å –¥–∞—Ç—É —Ä–∞—Å—á–µ—Ç–∞?
‚Äî –í—ã–±–µ—Ä–∏—Ç–µ "üìÖ –ó–∞–¥–∞—Ç—å –¥–∞—Ç—É" –∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.04.2025).

üìä –ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –æ—Ç—á–µ—Ç?
‚Äî –°—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø—Ä–æ–≤–µ–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–Ω–µ–π.
‚Äî –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∞ —Å 183+ –¥–Ω—è–º–∏ ‚Äî –≤—ã –Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã.

üîÅ –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Äî /reset: —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
‚Äî /periods: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤

üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, helpText))
}

func handleResetCommand(s *Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if isEmpty(s) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."))
		return
	}
	s.Data = Data{}
	s.Backup = Data{}
	s.Temp = nil
	_ = os.Remove(fmt.Sprintf("%s/data.json", s.HistoryDir))
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã."))
}

func handleSetDateCommand(s *Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if isEmpty(s) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."))
		return
	}
	s.PendingAction = "awaiting_date"
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"))
}

func handleUploadCommand(s *Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.Data.Current = "upload_pending"
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç."))
}

func handlePeriodsCommand(s *Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if isEmpty(s) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."))
		return
	}
	msgText := buildPeriodsList(s)
	newMsg := tgbotapi.NewMessage(msg.Chat.ID, msgText)
	newMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥", "edit_period")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥", "add_period")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üóë –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥", "delete_period")),
	)
	bot.Send(newMsg)
}

func getSession(userID int64) *Session {
	s, ok := sessions[userID]
	if !ok {
		s = &Session{UserID: userID}
		s.HistoryDir = ensureDirs(userID)
		loadUserData(s)
		sessions[userID] = s
	}
	return s
}

func isEmpty(s *Session) bool {
	return len(s.Data.Periods) == 0
}

func buildMainMenu(s *Session) tgbotapi.InlineKeyboardMarkup {
	var buttons [][]tgbotapi.InlineKeyboardButton

	if isEmpty(s) {
		buttons = [][]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", "upload_file")),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")),
		}
	} else {
		buttons = [][]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ", "periods")),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìä –û—Ç—á—ë—Ç", "show_report")),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìÖ –û—Ç—á—ë—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É", "set_date")),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª", "upload_report")),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üóë –°–±—Ä–æ—Å–∏—Ç—å", "reset")),
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "help")),
		}
	}

	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func buildPeriodsList(s *Session) string {
	builder := strings.Builder{}
	builder.WriteString("üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤:\n\n")
	for i, p := range s.Data.Periods {
		in := p.In
		if in == "" {
			in = "‚Äî"
		}
		out := p.Out
		if out == "" {
			out = "–ø–æ " + s.Data.Current
		}
		builder.WriteString(fmt.Sprintf("%d. %s ‚Äî %s (%s)\n", i+1, in, out, p.Country))
	}
	return builder.String()
}

func handleInputFile(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	fileID := msg.Document.FileID
	file, _ := bot.GetFile(tgbotapi.FileConfig{FileID: fileID})
	url := file.Link(bot.Token)
	resp, err := http.Get(url)

	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"))
		return
	}

	body, _ := io.ReadAll(resp.Body)
	_ = resp.Body.Close()

	msg.Text = string(body)
	s.Data.Current = "" // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
	handleJSONInput(msg, s, bot)
}
