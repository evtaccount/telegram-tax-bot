package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func handleJSONInput(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	backupSession(s)
	err := json.Unmarshal([]byte(msg.Text), &s.Data)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"))
		return
	}
	if s.Data.Current == "" {
		s.Data.Current = time.Now().Format("02.01.2006")
	}
	saveSession(s)
	report := buildReport(s.Data)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, report))
}

func handleAwaitingAddOut(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	if len(s.Temp) == 0 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."))
		s.PendingAction = ""
		return
	}
	date, err := parseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."))
		return
	}
	inDate, err := parseDate(s.Temp[0].In)
	if err != nil || date.Before(inDate) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –≤—ä–µ–∑–¥–∞."))
		return
	}
	s.Temp[0].Out = date.Format("02.01.2006")
	s.PendingAction = "awaiting_add_country"
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üåç –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:"))
}

func handleAwaitingAddCountry(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	country := strings.TrimSpace(msg.Text)
	if country == "" {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –°—Ç—Ä–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π."))
		return
	}
	if len(s.Temp) == 0 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –ø—É—Å—Ç."))
		s.PendingAction = ""
		return
	}
	period := s.Temp[0]
	period.Country = country

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
	newIn, errIn := parseDate(period.In)
	if errIn != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –≤—ä–µ–∑–¥–∞."))
		return
	}

	if len(s.Data.Periods) > 0 {
		last := s.Data.Periods[len(s.Data.Periods)-1]
		lastOut := last.Out
		if lastOut == "" {
			lastOut = s.Data.Current
		}
		lastOutDate, err := parseDate(lastOut)
		if err == nil && newIn.Before(lastOutDate) {
			bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥: –Ω–∞—Ä—É—à–µ–Ω —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫."))
			s.PendingAction = ""
			s.Temp = nil
			return
		}
	}

	s.Data.Periods = append(s.Data.Periods, period)
	s.Temp = nil
	s.PendingAction = ""
	saveSession(s)

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω."))
	handlePeriodsCommand(s, msg, bot)
}

func handleAddGapPeriod(s *Session, callback *tgbotapi.CallbackQuery, bot *tgbotapi.BotAPI) {
	chatID := callback.Message.Chat.ID

	newIn, _ := parseDate(s.TempEditedIn)
	prev := s.Data.Periods[s.EditingIndex-1]

	prevOut, _ := parseDate(prev.Out)
	newGapStart := prevOut.AddDate(0, 0, 1)
	newGapEnd := newIn.AddDate(0, 0, -1)

	newGap := Period{
		In:      newGapStart.Format("02.01.2006"),
		Out:     newGapEnd.Format("02.01.2006"),
		Country: "unknown",
	}

	// –í—Å—Ç–∞–≤–∏—Ç—å "unknown" –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–∏–º
	s.Data.Periods = append(
		s.Data.Periods[:s.EditingIndex],
		append([]Period{newGap}, s.Data.Periods[s.EditingIndex:]...)...,
	)

	// –û–±–Ω–æ–≤–ª—è–µ–º in —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	s.Data.Periods[s.EditingIndex+1].In = newIn.Format("02.01.2006")
	s.EditingIndex++ // –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
	s.PendingAction = ""
	s.TempEditedIn = ""
	saveSession(s)

	bot.Send(tgbotapi.NewMessage(chatID, "‚ûï –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–∏–æ–¥ 'unknown'. –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	handlePeriodsCommand(s, callback.Message, bot)
}

func handleAwaitingNewIn(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	newDate, err := parseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã."))
		return
	}

	index := s.EditingIndex
	if index < 0 || index >= len(s.Data.Periods) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–∏–æ–¥–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."))
		return
	}

	curr := s.Data.Periods[index]
	oldDate, _ := parseDate(curr.In)
	if newDate.Equal(oldDate) {
		s.PendingAction = ""
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ÑπÔ∏è –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."))
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
	if index > 0 {
		prev := s.Data.Periods[index-1]
		prevOut, err := parseDate(prev.Out)
		if err == nil {
			switch {
			case newDate.Before(prevOut):
				// –∫–æ–Ω—Ñ–ª–∏–∫—Ç ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–≤–∏–Ω—É—Ç—å out –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
				s.TempEditedIn = newDate.Format("02.01.2006")
				s.PendingAction = "resolve_in_conflict"
				saveSession(s)

				text := fmt.Sprintf("‚ö†Ô∏è –ù–æ–≤–∞—è –¥–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º (%s). –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
					formatDate(prevOut))
				markup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìå –ü–æ–¥–≤–∏–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥", "adjust_prev_out")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", "keep_conflict")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_edit")),
				)
				msg := tgbotapi.NewMessage(msg.Chat.ID, text)
				msg.ReplyMarkup = markup
				bot.Send(msg)
				return

			case newDate.After(prevOut.AddDate(0, 0, 1)):
				// –∑–∞–∑–æ—Ä ‚Üí –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
				s.TempEditedIn = newDate.Format("02.01.2006")
				s.PendingAction = "resolve_in_gap"
				saveSession(s)

				text := fmt.Sprintf("‚ö†Ô∏è –ú–µ–∂–¥—É %s –∏ %s –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–∑—Ä—ã–≤. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
					formatDate(prevOut.AddDate(0, 0, 1)), formatDate(newDate))
				markup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìå –ü–æ–¥–≤–∏–Ω—É—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥", "adjust_prev_out")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", "keep_conflict")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_edit")),
				)
				msg := tgbotapi.NewMessage(msg.Chat.ID, text)
				msg.ReplyMarkup = markup
				bot.Send(msg)
				return
			}
		}
	}

	// –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –æ–±–Ω–æ–≤–ª—è–µ–º
	s.Data.Periods[index].In = newDate.Format("02.01.2006")
	s.PendingAction = ""
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
}

func handleAwaitingNewOut(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	newDate, err := parseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã."))
		return
	}

	index := s.EditingIndex
	if index < 0 || index >= len(s.Data.Periods) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–∏–æ–¥–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."))
		return
	}

	curr := s.Data.Periods[index]
	oldDate, _ := parseDate(curr.Out)
	if newDate.Equal(oldDate) {
		s.PendingAction = ""
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ÑπÔ∏è –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."))
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å —Å–ª–µ–¥—É—é—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
	if index < len(s.Data.Periods)-1 {
		next := s.Data.Periods[index+1]
		nextIn, err := parseDate(next.In)
		if err == nil {
			switch {
			case newDate.After(nextIn):
				s.TempEditedOut = newDate.Format("02.01.2006")
				s.PendingAction = "resolve_out_conflict"
				saveSession(s)

				text := fmt.Sprintf("‚ö†Ô∏è –ù–æ–≤–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º (%s). –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
					formatDate(nextIn))
				markup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìå –ü–æ–¥–≤–∏–Ω—É—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥", "adjust_next_in")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", "keep_conflict")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_edit")),
				)
				msg := tgbotapi.NewMessage(msg.Chat.ID, text)
				msg.ReplyMarkup = markup
				bot.Send(msg)
				return

			case newDate.Before(nextIn.AddDate(0, 0, -1)):
				s.TempEditedOut = newDate.Format("02.01.2006")
				s.PendingAction = "resolve_out_gap"
				saveSession(s)

				text := fmt.Sprintf("‚ö†Ô∏è –ú–µ–∂–¥—É %s –∏ %s –æ–±—Ä–∞–∑–æ–≤–∞–ª—Å—è –∑–∞–∑–æ—Ä. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
					formatDate(newDate.AddDate(0, 0, 1)), formatDate(nextIn))
				markup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìå –ü–æ–¥–≤–∏–Ω—É—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥", "adjust_next_in")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", "keep_conflict")),
					tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_edit")),
				)
				msg := tgbotapi.NewMessage(msg.Chat.ID, text)
				msg.ReplyMarkup = markup
				bot.Send(msg)
				return
			}
		}
	}

	// –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –æ–±–Ω–æ–≤–ª—è–µ–º
	s.Data.Periods[index].Out = newDate.Format("02.01.2006")
	s.PendingAction = ""
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
}

func handleAwaitingNewCountry(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	newCountry := strings.TrimSpace(msg.Text)
	if newCountry == "" {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."))
		return
	}
	s.Data.Periods[s.EditingIndex].Country = newCountry
	s.PendingAction = ""
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –°—Ç—Ä–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
}

func handleAwaitingDate(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	date, err := parseDate(msg.Text)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"))
		return
	}
	s.Data.Current = date.Format("02.01.2006")
	s.PendingAction = ""
	saveSession(s)
	report := buildReport(s.Data)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ –î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %s\n\n%s", s.Data.Current, report)))
}

func handleAwaitingEditIndex(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	index, err := strconv.Atoi(strings.TrimSpace(msg.Text))

	if err != nil || index < 1 || index > len(s.Data.Periods) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–µ—Ä–∏–æ–¥–∞."))
		return
	}

	s.EditingIndex = index - 1
	s.PendingAction = "awaiting_edit_field"
	saveSession(s)

	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤—ä–µ–∑–¥–∞ (in)", "edit_in"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÜ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (out)", "edit_out"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üåç –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", "edit_country"),
		),
	)
	from := s.Data.Periods[s.EditingIndex].In
	till := s.Data.Periods[s.EditingIndex].Out
	msgText := fmt.Sprintf("–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ —Å %s –ø–æ %s. –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", from, till)
	msgToSend := tgbotapi.NewMessage(msg.Chat.ID, msgText)
	msgToSend.ReplyMarkup = buttons
	bot.Send(msgToSend)
}

func handleKeepConflict(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	if s.PendingAction == "confirm_conflict_in" {
		s.Data.Periods[s.EditingIndex].In = s.TempEditedIn
		s.PendingAction = ""
		saveSession(s)
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	} else if s.PendingAction == "confirm_conflict_out" {
		s.Data.Periods[s.EditingIndex].Out = s.TempEditedIn
		s.PendingAction = ""
		saveSession(s)
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	} else {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ö†Ô∏è –ù–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞."))
		return
	}

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
}

func handleAdjustNextIn(s *Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	index := s.EditingIndex
	if index+1 >= len(s.Data.Periods) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –û—à–∏–±–∫–∞: —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."))
		return
	}

	newOut, err := parseDate(s.TempEditedOut)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã."))
		return
	}

	// ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º out —É —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ in —É —Å–ª–µ–¥—É—é—â–µ–≥–æ
	s.Data.Periods[index].Out = s.TempEditedOut
	s.Data.Periods[index+1].In = newOut.AddDate(0, 0, 1).Format("02.01.2006")

	s.PendingAction = ""
	s.TempEditedOut = ""
	saveSession(s)

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üìå –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ —Å–¥–≤–∏–Ω—É—Ç. –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞."))
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
}

func handleCancelEdit(s *Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.PendingAction = ""
	s.TempEditedOut = ""
	saveSession(s)

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."))
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, formatPeriodList(s.Data.Periods, s.Data.Current)))
}

func handleAddOpenCountry(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	country := strings.TrimSpace(msg.Text)
	if country == "" {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"))
		return
	}
	s.Data.Periods = append(s.Data.Periods, Period{
		In:      s.Data.Current,
		Out:     "",
		Country: country,
	})
	s.PendingAction = ""
	saveSession(s)

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –ù–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω."))
	handlePeriodsCommand(s, msg, bot)
}

func handleStartCommand(s *Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	reply := tgbotapi.NewMessage(msg.Chat.ID, "üîò –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	reply.ReplyMarkup = buildMainMenu(s)
	bot.Send(reply)
}

func handleHelpCommand(msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	helpText := `‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ª–æ–≥–æ–≤–æ–µ —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö.

üìé –° —á–µ–≥–æ –Ω–∞—á–∞—Ç—å?
1. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ JSON-—Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫ (—Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–º–µ—Ä ‚Äî –ø–æ –∫–Ω–æ–ø–∫–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª").
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /upload_report –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ üìé.
3. –ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç, –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –≤—ã –ø—Ä–æ–≤–µ–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥.

üìÖ –ö–∞–∫ –∑–∞–¥–∞—Ç—å –¥–∞—Ç—É —Ä–∞—Å—á–µ—Ç–∞?
‚Äî –í—ã–±–µ—Ä–∏—Ç–µ "üìÖ –ó–∞–¥–∞—Ç—å –¥–∞—Ç—É" –∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.04.2025).

üìä –ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –æ—Ç—á–µ—Ç?
‚Äî –°—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø—Ä–æ–≤–µ–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–Ω–µ–π.
‚Äî –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∞ —Å 183+ –¥–Ω—è–º–∏ ‚Äî –≤—ã –Ω–∞–ª–æ–≥–æ–≤—ã–π —Ä–µ–∑–∏–¥–µ–Ω—Ç —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã.

üîÅ –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Äî /reset: —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
‚Äî /periods: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤

üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.`

	newMsg := tgbotapi.NewMessage(msg.Chat.ID, helpText)
	newMsg.ReplyMarkup = buildBackToMenu()
	bot.Send(newMsg)
}

func handleResetCommand(s *Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if isEmpty(s) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."))
		return
	}
	s.Data = Data{}
	s.Backup = Data{}
	s.Temp = nil
	_ = os.Remove(fmt.Sprintf("%s/data.json", s.HistoryDir))
	saveSession(s)

	newMsg := tgbotapi.NewMessage(msg.Chat.ID, "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.")
	newMsg.ReplyMarkup = buildBackToMenu()
	bot.Send(newMsg)
}

func handleSetDateCommand(s *Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if isEmpty(s) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."))
		return
	}
	s.PendingAction = "awaiting_date"
	saveSession(s)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"))
}

func handleUploadCommand(s *Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	s.Data.Current = "upload_pending"
	saveSession(s)

	newMsg := tgbotapi.NewMessage(msg.Chat.ID, "üìé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-—Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.")
	newMsg.ReplyMarkup = buildBackToMenu()
	bot.Send(newMsg)
}

func handlePeriodsCommand(s *Session, msg *tgbotapi.Message, bot *tgbotapi.BotAPI) {
	if isEmpty(s) {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."))
		return
	}
	msgText := buildPeriodsList(s)
	newMsg := tgbotapi.NewMessage(msg.Chat.ID, msgText)
	newMsg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥", "edit_period")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥", "add_period")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üóë –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥", "delete_period")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üìä –û—Ç—á—ë—Ç", "show_report")),
		tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "start")),
	)
	bot.Send(newMsg)
}

func handleInputFile(msg *tgbotapi.Message, s *Session, bot *tgbotapi.BotAPI) {
	fileID := msg.Document.FileID
	file, _ := bot.GetFile(tgbotapi.FileConfig{FileID: fileID})
	url := file.Link(bot.Token)
	resp, err := http.Get(url)

	if err != nil {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"))
		return
	}

	body, _ := io.ReadAll(resp.Body)
	_ = resp.Body.Close()

	msg.Text = string(body)
	s.Data.Current = "" // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
	handleJSONInput(msg, s, bot)
}
